-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLSFilterTemplate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of HLSFilterTemplate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLSFilterTemplate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=334,HLS_SYN_LUT=294}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_user_V_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter2_tmp_user_V_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_last_V_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_139_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_223 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_200_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_reg_228 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_data_V_1_fu_191_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal tmp_5_fu_107_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_4_cast_fu_135_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_4_cast_fu_117_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_160_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sw_V_fu_151_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_177_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_169_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_200_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_200_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component HLSFilterTemplatebkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    HLSFilterTemplatebkb_U1 : component HLSFilterTemplatebkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        din2 => grp_fu_200_p2,
        dout => grp_fu_200_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_data_V_0_vld_out))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_in))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (stream_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (stream_in_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_1)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_out)))))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_last_V_0_vld_out))) then 
                                        stream_in_V_last_V_0_sel_rd <= not(stream_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_in))) then 
                                        stream_in_V_last_V_0_sel_wr <= not(stream_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_last_V_0_state)) or ((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_last_V_0_state)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_last_V_0_state)) or ((ap_const_logic_0 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_last_V_0_state)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_last_V_0_state)) or ((ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_last_V_0_state)) or ((ap_const_lv2_3 = stream_in_V_last_V_0_state) and not(((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_out)))))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_user_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_user_V_0_vld_out))) then 
                                        stream_in_V_user_V_0_sel_rd <= not(stream_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_user_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_user_V_0_ack_in))) then 
                                        stream_in_V_user_V_0_sel_wr <= not(stream_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_user_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_user_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_user_V_0_state)) or ((ap_const_logic_0 = stream_in_V_user_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_user_V_0_state)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_user_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_user_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_user_V_0_state)) or ((ap_const_logic_0 = stream_in_V_user_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_user_V_0_state)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_user_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_user_V_0_state)) or ((ap_const_logic_1 = stream_in_V_user_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_user_V_0_state)) or ((ap_const_lv2_3 = stream_in_V_user_V_0_state) and not(((ap_const_logic_1 = stream_in_V_user_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_user_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_user_V_0_ack_out)))))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_data_V_1_vld_out))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_in))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_data_V_1_state)) or ((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_data_V_1_state)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_data_V_1_state)) or ((ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_data_V_1_state)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_data_V_1_state)) or ((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_data_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_data_V_1_state) and not(((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out)))))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_last_V_1_vld_out))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_in))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)) or ((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_last_V_1_state) and not(((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out)))))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_user_V_1_vld_out))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_in))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)) or ((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_user_V_1_state) and not(((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out)))))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_tmp_last_V_reg_213 <= tmp_last_V_reg_213;
                ap_reg_pp0_iter2_tmp_user_V_reg_208 <= tmp_user_V_reg_208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                mul_reg_228 <= grp_fu_200_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                r_V_reg_218 <= stream_in_V_data_V_0_data_out(15 downto 8);
                tmp_last_V_reg_213 <= stream_in_V_last_V_0_data_out;
                tmp_reg_223 <= tmp_fu_139_p2;
                tmp_user_V_reg_208 <= stream_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_data_V_0_load_A)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_data_V_0_load_B)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_last_V_0_load_A)) then
                stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_last_V_0_load_B)) then
                stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_user_V_0_load_A)) then
                stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_user_V_0_load_B)) then
                stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_A)) then
                stream_out_V_data_V_1_payload_A <= tmp_data_V_1_fu_191_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_B)) then
                stream_out_V_data_V_1_payload_B <= tmp_data_V_1_fu_191_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_A)) then
                stream_out_V_last_V_1_payload_A <= ap_reg_pp0_iter2_tmp_last_V_reg_213;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_B)) then
                stream_out_V_last_V_1_payload_B <= ap_reg_pp0_iter2_tmp_last_V_reg_213;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_A)) then
                stream_out_V_user_V_1_payload_A <= ap_reg_pp0_iter2_tmp_user_V_reg_208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_B)) then
                stream_out_V_user_V_1_payload_B <= ap_reg_pp0_iter2_tmp_user_V_reg_208;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = stream_in_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = stream_in_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = stream_in_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_V_data_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = stream_in_V_data_V_0_vld_out);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_const_logic_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_200_p0 <= grp_fu_200_p00(9 - 1 downto 0);
    grp_fu_200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_223),10));
    grp_fu_200_p1 <= grp_fu_200_p10(8 - 1 downto 0);
    grp_fu_200_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_218),10));
    grp_fu_200_p2 <= ap_const_lv22_556(12 - 1 downto 0);
    lhs_V_4_cast_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_107_p4),9));
    r_V_1_fu_131_p1 <= stream_in_V_data_V_0_data_out(8 - 1 downto 0);
    r_V_4_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_131_p1),9));

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_last_V_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_data_V_0_sel)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_sel_wr and stream_in_V_data_V_0_state_cmp_full);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);
    stream_in_V_last_V_0_ack_in <= stream_in_V_last_V_0_state(1);

    stream_in_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_last_V_0_data_out_assign_proc : process(stream_in_V_last_V_0_payload_A, stream_in_V_last_V_0_payload_B, stream_in_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_last_V_0_sel)) then 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_B;
        else 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_last_V_0_load_A <= (stream_in_V_last_V_0_state_cmp_full and not(stream_in_V_last_V_0_sel_wr));
    stream_in_V_last_V_0_load_B <= (stream_in_V_last_V_0_sel_wr and stream_in_V_last_V_0_state_cmp_full);
    stream_in_V_last_V_0_sel <= stream_in_V_last_V_0_sel_rd;
    stream_in_V_last_V_0_state_cmp_full <= '0' when (stream_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_last_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_last_V_0_vld_out <= stream_in_V_last_V_0_state(0);
    stream_in_V_user_V_0_ack_in <= stream_in_V_user_V_0_state(1);

    stream_in_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_user_V_0_data_out_assign_proc : process(stream_in_V_user_V_0_payload_A, stream_in_V_user_V_0_payload_B, stream_in_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_user_V_0_sel)) then 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_B;
        else 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_user_V_0_load_A <= (stream_in_V_user_V_0_state_cmp_full and not(stream_in_V_user_V_0_sel_wr));
    stream_in_V_user_V_0_load_B <= (stream_in_V_user_V_0_sel_wr and stream_in_V_user_V_0_state_cmp_full);
    stream_in_V_user_V_0_sel <= stream_in_V_user_V_0_sel_rd;
    stream_in_V_user_V_0_state_cmp_full <= '0' when (stream_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_user_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_user_V_0_vld_out <= stream_in_V_user_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_last_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_data_V_1_sel)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_sel_wr and stream_out_V_data_V_1_state_cmp_full);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_last_V_1_sel)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_sel_wr and stream_out_V_last_V_1_state_cmp_full);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_user_V_1_sel)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_sel_wr and stream_out_V_user_V_1_state_cmp_full);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    sw_V_fu_151_p4 <= mul_reg_228(21 downto 12);
    tmp_2_fu_169_p3 <= (tmp_6_fu_160_p4 & ap_const_lv8_0);
    tmp_3_fu_177_p3 <= (ap_const_lv6_0 & sw_V_fu_151_p4);
    tmp_4_fu_185_p2 <= (tmp_3_fu_177_p3 or tmp_2_fu_169_p3);
    tmp_5_fu_107_p4 <= stream_in_V_data_V_0_data_out(23 downto 16);
    tmp_6_fu_160_p4 <= mul_reg_228(19 downto 12);
    tmp_data_V_1_fu_191_p3 <= (tmp_6_fu_160_p4 & tmp_4_fu_185_p2);
    tmp_fu_139_p2 <= std_logic_vector(unsigned(r_V_4_cast_fu_135_p1) + unsigned(lhs_V_4_cast_fu_117_p1));
end behav;
