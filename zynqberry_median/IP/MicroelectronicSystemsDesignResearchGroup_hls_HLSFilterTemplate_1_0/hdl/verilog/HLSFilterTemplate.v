// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLSFilterTemplate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=334,HLS_SYN_LUT=294}" *)

module HLSFilterTemplate (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TUSER,
        stream_out_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [23:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;

reg    ap_rst_n_inv;
reg   [23:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [23:0] stream_in_V_data_V_0_payload_A;
reg   [23:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [0:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [0:0] stream_in_V_user_V_0_payload_A;
reg   [0:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_V_last_V_0_data_out;
wire    stream_in_V_last_V_0_vld_in;
wire    stream_in_V_last_V_0_vld_out;
wire    stream_in_V_last_V_0_ack_in;
reg    stream_in_V_last_V_0_ack_out;
reg   [0:0] stream_in_V_last_V_0_payload_A;
reg   [0:0] stream_in_V_last_V_0_payload_B;
reg    stream_in_V_last_V_0_sel_rd;
reg    stream_in_V_last_V_0_sel_wr;
wire    stream_in_V_last_V_0_sel;
wire    stream_in_V_last_V_0_load_A;
wire    stream_in_V_last_V_0_load_B;
reg   [1:0] stream_in_V_last_V_0_state;
wire    stream_in_V_last_V_0_state_cmp_full;
reg   [23:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [23:0] stream_out_V_data_V_1_payload_A;
reg   [23:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [0:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [0:0] stream_out_V_user_V_1_payload_A;
reg   [0:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg    stream_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_user_V_reg_208;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter2_tmp_user_V_reg_208;
reg   [0:0] tmp_last_V_reg_213;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_213;
reg   [7:0] r_V_reg_218;
wire   [8:0] tmp_fu_139_p2;
reg   [8:0] tmp_reg_223;
wire   [21:0] grp_fu_200_p3;
reg   [21:0] mul_reg_228;
reg    ap_enable_reg_pp0_iter2;
wire   [23:0] tmp_data_V_1_fu_191_p3;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] tmp_5_fu_107_p4;
wire   [7:0] r_V_1_fu_131_p1;
wire   [8:0] r_V_4_cast_fu_135_p1;
wire   [8:0] lhs_V_4_cast_fu_117_p1;
wire   [7:0] tmp_6_fu_160_p4;
wire   [9:0] sw_V_fu_151_p4;
wire   [15:0] tmp_3_fu_177_p3;
wire   [15:0] tmp_2_fu_169_p3;
wire   [15:0] tmp_4_fu_185_p2;
wire   [8:0] grp_fu_200_p0;
wire   [7:0] grp_fu_200_p1;
wire   [11:0] grp_fu_200_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_200_p00;
wire   [9:0] grp_fu_200_p10;

// power-on initialization
initial begin
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_V_last_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

HLSFilterTemplatebkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 22 ))
HLSFilterTemplatebkb_U1(
    .din0(grp_fu_200_p0),
    .din1(grp_fu_200_p1),
    .din2(grp_fu_200_p2),
    .dout(grp_fu_200_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_data_V_0_ack_out) & (1'b1 == stream_in_V_data_V_0_vld_out))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_in))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == 2'd3)) | ((1'b0 == stream_in_V_data_V_0_vld_in) & (stream_in_V_data_V_0_state == 2'd2)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b0 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == 2'd3)) | ((1'b0 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == 2'd1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_in_V_data_V_0_vld_in) & (stream_in_V_data_V_0_state == 2'd2)) | ((1'b1 == stream_in_V_data_V_0_ack_out) & (stream_in_V_data_V_0_state == 2'd1)) | ((stream_in_V_data_V_0_state == 2'd3) & ~((1'b1 == stream_in_V_data_V_0_vld_in) & (1'b0 == stream_in_V_data_V_0_ack_out)) & ~((1'b0 == stream_in_V_data_V_0_vld_in) & (1'b1 == stream_in_V_data_V_0_ack_out))))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_last_V_0_ack_out) & (1'b1 == stream_in_V_last_V_0_vld_out))) begin
            stream_in_V_last_V_0_sel_rd <= ~stream_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_in))) begin
            stream_in_V_last_V_0_sel_wr <= ~stream_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_out) & (2'd3 == stream_in_V_last_V_0_state)) | ((1'b0 == stream_in_V_last_V_0_vld_in) & (2'd2 == stream_in_V_last_V_0_state)))) begin
            stream_in_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b0 == stream_in_V_last_V_0_ack_out) & (2'd3 == stream_in_V_last_V_0_state)) | ((1'b0 == stream_in_V_last_V_0_ack_out) & (2'd1 == stream_in_V_last_V_0_state)))) begin
            stream_in_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_in_V_last_V_0_vld_in) & (2'd2 == stream_in_V_last_V_0_state)) | ((1'b1 == stream_in_V_last_V_0_ack_out) & (2'd1 == stream_in_V_last_V_0_state)) | ((2'd3 == stream_in_V_last_V_0_state) & ~((1'b1 == stream_in_V_last_V_0_vld_in) & (1'b0 == stream_in_V_last_V_0_ack_out)) & ~((1'b0 == stream_in_V_last_V_0_vld_in) & (1'b1 == stream_in_V_last_V_0_ack_out))))) begin
            stream_in_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_user_V_0_ack_out) & (1'b1 == stream_in_V_user_V_0_vld_out))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_user_V_0_vld_in) & (1'b1 == stream_in_V_user_V_0_ack_in))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_in_V_user_V_0_vld_in) & (1'b1 == stream_in_V_user_V_0_ack_out) & (2'd3 == stream_in_V_user_V_0_state)) | ((1'b0 == stream_in_V_user_V_0_vld_in) & (2'd2 == stream_in_V_user_V_0_state)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_in_V_user_V_0_vld_in) & (1'b0 == stream_in_V_user_V_0_ack_out) & (2'd3 == stream_in_V_user_V_0_state)) | ((1'b0 == stream_in_V_user_V_0_ack_out) & (2'd1 == stream_in_V_user_V_0_state)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_in_V_user_V_0_vld_in) & (2'd2 == stream_in_V_user_V_0_state)) | ((1'b1 == stream_in_V_user_V_0_ack_out) & (2'd1 == stream_in_V_user_V_0_state)) | ((2'd3 == stream_in_V_user_V_0_state) & ~((1'b1 == stream_in_V_user_V_0_vld_in) & (1'b0 == stream_in_V_user_V_0_ack_out)) & ~((1'b0 == stream_in_V_user_V_0_vld_in) & (1'b1 == stream_in_V_user_V_0_ack_out))))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_ack_out) & (1'b1 == stream_out_V_data_V_1_vld_out))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_in))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out) & (2'd3 == stream_out_V_data_V_1_state)) | ((1'b0 == stream_out_V_data_V_1_vld_in) & (2'd2 == stream_out_V_data_V_1_state)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out) & (2'd3 == stream_out_V_data_V_1_state)) | ((1'b0 == stream_out_V_data_V_1_ack_out) & (2'd1 == stream_out_V_data_V_1_state)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (2'd2 == stream_out_V_data_V_1_state)) | ((1'b1 == stream_out_V_data_V_1_ack_out) & (2'd1 == stream_out_V_data_V_1_state)) | ((2'd3 == stream_out_V_data_V_1_state) & ~((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out)) & ~((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out))))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_ack_out) & (1'b1 == stream_out_V_last_V_1_vld_out))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_in))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out) & (2'd3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_vld_in) & (2'd2 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out) & (2'd3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_ack_out) & (2'd1 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (2'd2 == stream_out_V_last_V_1_state)) | ((1'b1 == stream_out_V_last_V_1_ack_out) & (2'd1 == stream_out_V_last_V_1_state)) | ((2'd3 == stream_out_V_last_V_1_state) & ~((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out)) & ~((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out))))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_user_V_1_ack_out) & (1'b1 == stream_out_V_user_V_1_vld_out))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_in))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_out) & (2'd3 == stream_out_V_user_V_1_state)) | ((1'b0 == stream_out_V_user_V_1_vld_in) & (2'd2 == stream_out_V_user_V_1_state)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b0 == stream_out_V_user_V_1_ack_out) & (2'd3 == stream_out_V_user_V_1_state)) | ((1'b0 == stream_out_V_user_V_1_ack_out) & (2'd1 == stream_out_V_user_V_1_state)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_user_V_1_vld_in) & (2'd2 == stream_out_V_user_V_1_state)) | ((1'b1 == stream_out_V_user_V_1_ack_out) & (2'd1 == stream_out_V_user_V_1_state)) | ((2'd3 == stream_out_V_user_V_1_state) & ~((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b0 == stream_out_V_user_V_1_ack_out)) & ~((1'b0 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_out))))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_tmp_last_V_reg_213 <= tmp_last_V_reg_213;
        ap_reg_pp0_iter2_tmp_user_V_reg_208 <= tmp_user_V_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        mul_reg_228 <= grp_fu_200_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        r_V_reg_218 <= {{stream_in_V_data_V_0_data_out[15:8]}};
        tmp_last_V_reg_213 <= stream_in_V_last_V_0_data_out;
        tmp_reg_223 <= tmp_fu_139_p2;
        tmp_user_V_reg_208 <= stream_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_data_V_0_load_A)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_data_V_0_load_B)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_last_V_0_load_A)) begin
        stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_last_V_0_load_B)) begin
        stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_user_V_0_load_A)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_user_V_0_load_B)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_A)) begin
        stream_out_V_data_V_1_payload_A <= tmp_data_V_1_fu_191_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_B)) begin
        stream_out_V_data_V_1_payload_B <= tmp_data_V_1_fu_191_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_A)) begin
        stream_out_V_last_V_1_payload_A <= ap_reg_pp0_iter2_tmp_last_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_B)) begin
        stream_out_V_last_V_1_payload_B <= ap_reg_pp0_iter2_tmp_last_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_user_V_1_load_A)) begin
        stream_out_V_user_V_1_payload_A <= ap_reg_pp0_iter2_tmp_user_V_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_user_V_1_load_B)) begin
        stream_out_V_user_V_1_payload_B <= ap_reg_pp0_iter2_tmp_user_V_reg_208;
    end
end

always @ (*) begin
    if (((1'b0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_data_V_0_sel)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_last_V_0_sel)) begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B;
    end else begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_user_V_0_sel)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_data_V_1_sel)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_last_V_1_sel)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_user_V_1_sel)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == stream_in_V_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == stream_in_V_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == stream_out_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == stream_in_V_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == stream_out_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == stream_in_V_data_V_0_vld_out);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_200_p0 = grp_fu_200_p00;

assign grp_fu_200_p00 = tmp_reg_223;

assign grp_fu_200_p1 = grp_fu_200_p10;

assign grp_fu_200_p10 = r_V_reg_218;

assign grp_fu_200_p2 = 22'd1366;

assign lhs_V_4_cast_fu_117_p1 = tmp_5_fu_107_p4;

assign r_V_1_fu_131_p1 = stream_in_V_data_V_0_data_out[7:0];

assign r_V_4_cast_fu_135_p1 = r_V_1_fu_131_p1;

assign stream_in_TREADY = stream_in_V_last_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_sel_wr & stream_in_V_data_V_0_state_cmp_full);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_last_V_0_ack_in = stream_in_V_last_V_0_state[1'd1];

assign stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full & ~stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_sel_wr & stream_in_V_last_V_0_state_cmp_full);

assign stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd;

assign stream_in_V_last_V_0_state_cmp_full = ((stream_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_last_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_last_V_0_vld_out = stream_in_V_last_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_sel_wr & stream_in_V_user_V_0_state_cmp_full);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr & stream_out_V_data_V_1_state_cmp_full);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr & stream_out_V_last_V_1_state_cmp_full);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_sel_wr & stream_out_V_user_V_1_state_cmp_full);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign sw_V_fu_151_p4 = {{mul_reg_228[21:12]}};

assign tmp_2_fu_169_p3 = {{tmp_6_fu_160_p4}, {8'd0}};

assign tmp_3_fu_177_p3 = {{6'd0}, {sw_V_fu_151_p4}};

assign tmp_4_fu_185_p2 = (tmp_3_fu_177_p3 | tmp_2_fu_169_p3);

assign tmp_5_fu_107_p4 = {{stream_in_V_data_V_0_data_out[23:16]}};

assign tmp_6_fu_160_p4 = {{mul_reg_228[19:12]}};

assign tmp_data_V_1_fu_191_p3 = {{tmp_6_fu_160_p4}, {tmp_4_fu_185_p2}};

assign tmp_fu_139_p2 = (r_V_4_cast_fu_135_p1 + lhs_V_4_cast_fu_117_p1);

endmodule //HLSFilterTemplate
