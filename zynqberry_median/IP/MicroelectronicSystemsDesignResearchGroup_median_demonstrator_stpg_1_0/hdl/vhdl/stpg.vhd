-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stpg is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of stpg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stpg,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.328000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=619,HLS_SYN_LUT=382}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal width_V : STD_LOGIC_VECTOR (11 downto 0);
    signal height_V : STD_LOGIC_VECTOR (11 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal height_V_read_reg_212 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_130_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_reg_217 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_cast_fu_138_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_cast_reg_222 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_142_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_reg_227 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_1_fu_158_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_1_reg_235 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal color_V_1_fu_164_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal color_V_1_reg_240 : STD_LOGIC_VECTOR (23 downto 0);
    signal exitcond1_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal pixel_last_V_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal color_V_fu_188_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal color_V_reg_258 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_1_fu_194_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_1_reg_263 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_s_reg_83 : STD_LOGIC_VECTOR (23 downto 0);
    signal x_reg_95 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_V_reg_106 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_reg_119 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_user_V_fu_54 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast1_fu_134_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_cast_fu_169_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component stpg_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        width_V : OUT STD_LOGIC_VECTOR (11 downto 0);
        height_V : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    stpg_AXILiteS_s_axi_U : component stpg_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        width_V => width_V,
        height_V => height_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_data_V_1_vld_out))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_in))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (stream_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (stream_out_V_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_1)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out)))))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_last_V_1_vld_out))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_in))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)) or ((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_last_V_1_state) and not(((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out)))))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_user_V_1_vld_out))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_in))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)) or ((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_user_V_1_state) and not(((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out)))))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_s_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_173_p2))) then 
                p_s_reg_83 <= color_V_1_reg_240;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_reg_83 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    t_V_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_153_p2))) then 
                t_V_reg_106 <= p_s_reg_83;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (stream_out_V_data_V_1_ack_in = ap_const_logic_1))) then 
                t_V_reg_106 <= color_V_reg_258;
            end if; 
        end if;
    end process;

    tmp_user_V_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then 
                tmp_user_V_fu_54 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                tmp_user_V_fu_54 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    x_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_173_p2))) then 
                x_reg_95 <= x_1_reg_235;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_95 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    y_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_153_p2))) then 
                y_reg_119 <= ap_const_lv13_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (stream_out_V_data_V_1_ack_in = ap_const_logic_1))) then 
                y_reg_119 <= y_1_reg_263;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_153_p2))) then
                color_V_1_reg_240 <= color_V_1_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then
                color_V_reg_258 <= color_V_fu_188_p2;
                y_1_reg_263 <= y_1_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                height_V_read_reg_212 <= height_V;
                    tmp_1_cast_reg_222(11 downto 0) <= tmp_1_cast_fu_138_p1(11 downto 0);
                tmp_2_reg_227 <= tmp_2_fu_142_p2;
                    tmp_reg_217(11 downto 0) <= tmp_fu_130_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_A)) then
                stream_out_V_data_V_1_payload_A <= t_V_reg_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_B)) then
                stream_out_V_data_V_1_payload_B <= t_V_reg_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_A)) then
                stream_out_V_last_V_1_payload_A <= pixel_last_V_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_B)) then
                stream_out_V_last_V_1_payload_B <= pixel_last_V_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_A)) then
                stream_out_V_user_V_1_payload_A <= tmp_user_V_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_B)) then
                stream_out_V_user_V_1_payload_B <= tmp_user_V_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))))) then
                x_1_reg_235 <= x_1_fu_158_p2;
            end if;
        end if;
    end process;
    tmp_reg_217(23 downto 12) <= "000000000000";
    tmp_1_cast_reg_222(13 downto 12) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_CS_fsm_state3, exitcond_fu_173_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, exitcond1_fu_153_p2, ap_block_state3_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_153_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_0 = exitcond1_fu_153_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_173_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (stream_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in));
    end process;


    ap_block_state3_io_assign_proc : process(stream_out_V_data_V_1_ack_in, exitcond_fu_173_p2)
    begin
                ap_block_state3_io <= ((ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_153_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_153_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_153_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in))) and (ap_const_lv1_1 = exitcond1_fu_153_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    color_V_1_fu_164_p2 <= std_logic_vector(unsigned(tmp_reg_217) + unsigned(p_s_reg_83));
    color_V_fu_188_p2 <= std_logic_vector(unsigned(t_V_reg_106) + unsigned(ap_const_lv24_1));
    exitcond1_fu_153_p2 <= "1" when (x_reg_95 = height_V_read_reg_212) else "0";
    exitcond_fu_173_p2 <= "1" when (y_reg_119 = tmp_2_reg_227) else "0";
    pixel_last_V_fu_182_p2 <= "1" when (y_cast_fu_169_p1 = tmp_1_cast_reg_222) else "0";
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_CS_fsm_state3, exitcond_fu_173_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_last_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_data_V_1_sel)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_sel_wr and stream_out_V_data_V_1_state_cmp_full);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_173_p2, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_last_V_1_sel)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_sel_wr and stream_out_V_last_V_1_state_cmp_full);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_173_p2, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_user_V_1_sel)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_sel_wr and stream_out_V_user_V_1_state_cmp_full);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_173_p2, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_173_p2) and (ap_block_state3_io = ap_const_boolean_0))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    tmp_1_cast1_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V),13));
    tmp_1_cast_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V),14));
    tmp_2_fu_142_p2 <= std_logic_vector(unsigned(tmp_1_cast1_fu_134_p1) + unsigned(ap_const_lv13_1));
    tmp_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V),24));
    x_1_fu_158_p2 <= std_logic_vector(unsigned(x_reg_95) + unsigned(ap_const_lv12_1));
    y_1_fu_194_p2 <= std_logic_vector(unsigned(y_reg_119) + unsigned(ap_const_lv13_1));
    y_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_119),14));
end behav;
