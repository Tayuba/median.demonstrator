// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stpg,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.328000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=619,HLS_SYN_LUT=382}" *)

module stpg (
        ap_clk,
        ap_rst_n,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TUSER,
        stream_out_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [23:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [23:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [23:0] stream_out_V_data_V_1_payload_A;
reg   [23:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [0:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [0:0] stream_out_V_user_V_1_payload_A;
reg   [0:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
wire   [11:0] width_V;
wire   [11:0] height_V;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_173_p2;
wire    ap_CS_fsm_state4;
reg   [11:0] height_V_read_reg_212;
wire   [23:0] tmp_fu_130_p1;
reg   [23:0] tmp_reg_217;
wire   [13:0] tmp_1_cast_fu_138_p1;
reg   [13:0] tmp_1_cast_reg_222;
wire   [12:0] tmp_2_fu_142_p2;
reg   [12:0] tmp_2_reg_227;
wire   [11:0] x_1_fu_158_p2;
reg   [11:0] x_1_reg_235;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [23:0] color_V_1_fu_164_p2;
reg   [23:0] color_V_1_reg_240;
wire   [0:0] exitcond1_fu_153_p2;
reg    ap_block_state3_io;
wire   [0:0] pixel_last_V_fu_182_p2;
wire   [23:0] color_V_fu_188_p2;
reg   [23:0] color_V_reg_258;
wire   [12:0] y_1_fu_194_p2;
reg   [12:0] y_1_reg_263;
reg   [23:0] p_s_reg_83;
reg   [11:0] x_reg_95;
reg   [23:0] t_V_reg_106;
reg   [12:0] y_reg_119;
reg   [0:0] tmp_user_V_fu_54;
wire   [12:0] tmp_1_cast1_fu_134_p1;
wire   [13:0] y_cast_fu_169_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
end

stpg_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stpg_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .width_V(width_V),
    .height_V(height_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_ack_out) & (1'b1 == stream_out_V_data_V_1_vld_out))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_in))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out) & (stream_out_V_data_V_1_state == 2'd3)) | ((1'b0 == stream_out_V_data_V_1_vld_in) & (stream_out_V_data_V_1_state == 2'd2)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out) & (stream_out_V_data_V_1_state == 2'd3)) | ((1'b0 == stream_out_V_data_V_1_ack_out) & (stream_out_V_data_V_1_state == 2'd1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_data_V_1_vld_in) & (stream_out_V_data_V_1_state == 2'd2)) | ((1'b1 == stream_out_V_data_V_1_ack_out) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_V_data_V_1_state == 2'd3) & ~((1'b1 == stream_out_V_data_V_1_vld_in) & (1'b0 == stream_out_V_data_V_1_ack_out)) & ~((1'b0 == stream_out_V_data_V_1_vld_in) & (1'b1 == stream_out_V_data_V_1_ack_out))))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_ack_out) & (1'b1 == stream_out_V_last_V_1_vld_out))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_in))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out) & (2'd3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_vld_in) & (2'd2 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out) & (2'd3 == stream_out_V_last_V_1_state)) | ((1'b0 == stream_out_V_last_V_1_ack_out) & (2'd1 == stream_out_V_last_V_1_state)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_last_V_1_vld_in) & (2'd2 == stream_out_V_last_V_1_state)) | ((1'b1 == stream_out_V_last_V_1_ack_out) & (2'd1 == stream_out_V_last_V_1_state)) | ((2'd3 == stream_out_V_last_V_1_state) & ~((1'b1 == stream_out_V_last_V_1_vld_in) & (1'b0 == stream_out_V_last_V_1_ack_out)) & ~((1'b0 == stream_out_V_last_V_1_vld_in) & (1'b1 == stream_out_V_last_V_1_ack_out))))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_user_V_1_ack_out) & (1'b1 == stream_out_V_user_V_1_vld_out))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_in))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_out) & (2'd3 == stream_out_V_user_V_1_state)) | ((1'b0 == stream_out_V_user_V_1_vld_in) & (2'd2 == stream_out_V_user_V_1_state)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b0 == stream_out_V_user_V_1_ack_out) & (2'd3 == stream_out_V_user_V_1_state)) | ((1'b0 == stream_out_V_user_V_1_ack_out) & (2'd1 == stream_out_V_user_V_1_state)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == stream_out_V_user_V_1_vld_in) & (2'd2 == stream_out_V_user_V_1_state)) | ((1'b1 == stream_out_V_user_V_1_ack_out) & (2'd1 == stream_out_V_user_V_1_state)) | ((2'd3 == stream_out_V_user_V_1_state) & ~((1'b1 == stream_out_V_user_V_1_vld_in) & (1'b0 == stream_out_V_user_V_1_ack_out)) & ~((1'b0 == stream_out_V_user_V_1_vld_in) & (1'b1 == stream_out_V_user_V_1_ack_out))))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0) & (1'd1 == exitcond_fu_173_p2))) begin
        p_s_reg_83 <= color_V_1_reg_240;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_83 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd0 == exitcond1_fu_153_p2))) begin
        t_V_reg_106 <= p_s_reg_83;
    end else if (((1'b1 == ap_CS_fsm_state4) & (stream_out_V_data_V_1_ack_in == 1'b1))) begin
        t_V_reg_106 <= color_V_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
        tmp_user_V_fu_54 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_user_V_fu_54 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0) & (1'd1 == exitcond_fu_173_p2))) begin
        x_reg_95 <= x_1_reg_235;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_95 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd0 == exitcond1_fu_153_p2))) begin
        y_reg_119 <= 13'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (stream_out_V_data_V_1_ack_in == 1'b1))) begin
        y_reg_119 <= y_1_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd0 == exitcond1_fu_153_p2))) begin
        color_V_1_reg_240 <= color_V_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
        color_V_reg_258 <= color_V_fu_188_p2;
        y_1_reg_263 <= y_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        height_V_read_reg_212 <= height_V;
        tmp_1_cast_reg_222[11 : 0] <= tmp_1_cast_fu_138_p1[11 : 0];
        tmp_2_reg_227 <= tmp_2_fu_142_p2;
        tmp_reg_217[11 : 0] <= tmp_fu_130_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_A)) begin
        stream_out_V_data_V_1_payload_A <= t_V_reg_106;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_data_V_1_load_B)) begin
        stream_out_V_data_V_1_payload_B <= t_V_reg_106;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_A)) begin
        stream_out_V_last_V_1_payload_A <= pixel_last_V_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_last_V_1_load_B)) begin
        stream_out_V_last_V_1_payload_B <= pixel_last_V_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_user_V_1_load_A)) begin
        stream_out_V_user_V_1_payload_A <= tmp_user_V_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_out_V_user_V_1_load_B)) begin
        stream_out_V_user_V_1_payload_B <= tmp_user_V_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)))) begin
        x_1_reg_235 <= x_1_fu_158_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd1 == exitcond1_fu_153_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd1 == exitcond1_fu_153_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2)) | (1'b1 == ap_CS_fsm_state4))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_data_V_1_sel)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_last_V_1_sel)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_out_V_user_V_1_sel)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd1 == exitcond1_fu_153_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in)) & (1'd0 == exitcond1_fu_153_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0) & (1'd1 == exitcond_fu_173_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_173_p2) & (ap_block_state3_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (stream_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((1'b0 == stream_out_V_data_V_1_ack_in) | (1'b0 == stream_out_V_user_V_1_ack_in) | (1'b0 == stream_out_V_last_V_1_ack_in));
end

always @ (*) begin
    ap_block_state3_io = ((1'd0 == exitcond_fu_173_p2) & (1'b0 == stream_out_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign color_V_1_fu_164_p2 = (tmp_reg_217 + p_s_reg_83);

assign color_V_fu_188_p2 = (t_V_reg_106 + 24'd1);

assign exitcond1_fu_153_p2 = ((x_reg_95 == height_V_read_reg_212) ? 1'b1 : 1'b0);

assign exitcond_fu_173_p2 = ((y_reg_119 == tmp_2_reg_227) ? 1'b1 : 1'b0);

assign pixel_last_V_fu_182_p2 = ((y_cast_fu_169_p1 == tmp_1_cast_reg_222) ? 1'b1 : 1'b0);

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr & stream_out_V_data_V_1_state_cmp_full);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr & stream_out_V_last_V_1_state_cmp_full);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_sel_wr & stream_out_V_user_V_1_state_cmp_full);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign tmp_1_cast1_fu_134_p1 = width_V;

assign tmp_1_cast_fu_138_p1 = width_V;

assign tmp_2_fu_142_p2 = (tmp_1_cast1_fu_134_p1 + 13'd1);

assign tmp_fu_130_p1 = width_V;

assign x_1_fu_158_p2 = (x_reg_95 + 12'd1);

assign y_1_fu_194_p2 = (y_reg_119 + 13'd1);

assign y_cast_fu_169_p1 = y_reg_119;

always @ (posedge ap_clk) begin
    tmp_reg_217[23:12] <= 12'b000000000000;
    tmp_1_cast_reg_222[13:12] <= 2'b00;
end

endmodule //stpg
