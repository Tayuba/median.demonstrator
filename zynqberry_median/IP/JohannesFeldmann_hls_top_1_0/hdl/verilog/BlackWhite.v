// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BlackWhite (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TUSER,
        stream_in_TLAST,
        BWStream_V_data_V_din,
        BWStream_V_data_V_full_n,
        BWStream_V_data_V_write,
        BWStream_V_user_V_din,
        BWStream_V_user_V_full_n,
        BWStream_V_user_V_write,
        BWStream_V_last_V_din,
        BWStream_V_last_V_full_n,
        BWStream_V_last_V_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [7:0] BWStream_V_data_V_din;
input   BWStream_V_data_V_full_n;
output   BWStream_V_data_V_write;
output  [0:0] BWStream_V_user_V_din;
input   BWStream_V_user_V_full_n;
output   BWStream_V_user_V_write;
output  [0:0] BWStream_V_last_V_din;
input   BWStream_V_last_V_full_n;
output   BWStream_V_last_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg stream_in_TREADY;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    internal_ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    BWStream_V_data_V1_status;
reg   [0:0] empty_n_4_reg_156;
reg   [0:0] ap_reg_pp0_iter2_empty_n_4_reg_156;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_flag00011001;
reg    start_once_reg;
reg    BWStream_V_data_V_blk_n;
wire    ap_block_pp0_stage0_flag00000000;
reg    BWStream_V_user_V_blk_n;
reg    BWStream_V_last_V_blk_n;
wire   [0:0] empty_n_4_fu_77_p1;
reg   [0:0] ap_reg_pp0_iter1_empty_n_4_reg_156;
reg   [0:0] tmp_user_V_reg_160;
reg   [0:0] ap_reg_pp0_iter1_tmp_user_V_reg_160;
reg   [0:0] ap_reg_pp0_iter2_tmp_user_V_reg_160;
reg   [0:0] tmp_last_V_reg_165;
reg   [0:0] ap_reg_pp0_iter1_tmp_last_V_reg_165;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_165;
reg   [7:0] phitmp_cast_i_reg_170;
wire   [8:0] color_V_1_i_fu_125_p2;
reg   [8:0] color_V_1_i_reg_175;
reg    ap_block_pp0_stage0_flag00011011;
reg    BWStream_V_data_V1_update;
reg    ap_block_pp0_stage0_flag00001001;
wire   [0:0] empty_n_nbread_fu_54_p4_0;
wire   [7:0] tmp_fu_93_p4;
wire   [7:0] tmp_1_fu_117_p1;
wire   [8:0] color_V_cast_i_fu_103_p1;
wire   [8:0] p_1_cast_i_fu_121_p1;
wire   [21:0] grp_fu_147_p3;
wire   [8:0] grp_fu_147_p0;
wire   [7:0] grp_fu_147_p1;
wire   [11:0] grp_fu_147_p2;
reg    grp_fu_147_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_147_p00;
wire   [9:0] grp_fu_147_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 start_once_reg = 1'b0;
end

top_am_addmul_9nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 22 ))
top_am_addmul_9nsbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_147_p0),
    .din1(grp_fu_147_p1),
    .din2(grp_fu_147_p2),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_empty_n_4_reg_156 <= empty_n_4_reg_156;
        ap_reg_pp0_iter1_tmp_last_V_reg_165 <= tmp_last_V_reg_165;
        ap_reg_pp0_iter1_tmp_user_V_reg_160 <= tmp_user_V_reg_160;
        empty_n_4_reg_156 <= empty_n_nbread_fu_54_p4_0;
        tmp_last_V_reg_165 <= stream_in_TLAST;
        tmp_user_V_reg_160 <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_empty_n_4_reg_156 <= ap_reg_pp0_iter1_empty_n_4_reg_156;
        ap_reg_pp0_iter2_tmp_last_V_reg_165 <= ap_reg_pp0_iter1_tmp_last_V_reg_165;
        ap_reg_pp0_iter2_tmp_user_V_reg_160 <= ap_reg_pp0_iter1_tmp_user_V_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == empty_n_4_fu_77_p1))) begin
        color_V_1_i_reg_175 <= color_V_1_i_fu_125_p2;
        phitmp_cast_i_reg_170 <= {{stream_in_TDATA[15:8]}};
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        BWStream_V_data_V1_update = 1'b1;
    end else begin
        BWStream_V_data_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        BWStream_V_data_V_blk_n = BWStream_V_data_V_full_n;
    end else begin
        BWStream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        BWStream_V_last_V_blk_n = BWStream_V_last_V_full_n;
    end else begin
        BWStream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        BWStream_V_user_V_blk_n = BWStream_V_user_V_full_n;
    end else begin
        BWStream_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_idle_pp0_0to2))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == real_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == real_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BWStream_V_data_V1_status = (BWStream_V_data_V_full_n & BWStream_V_user_V_full_n & BWStream_V_last_V_full_n);

assign BWStream_V_data_V_din = {{grp_fu_147_p3[19:12]}};

assign BWStream_V_data_V_write = BWStream_V_data_V1_update;

assign BWStream_V_last_V_din = ap_reg_pp0_iter2_tmp_last_V_reg_165;

assign BWStream_V_last_V_write = BWStream_V_data_V1_update;

assign BWStream_V_user_V_din = ap_reg_pp0_iter2_tmp_user_V_reg_160;

assign BWStream_V_user_V_write = BWStream_V_data_V1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == BWStream_V_data_V1_status) & (ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == BWStream_V_data_V1_status) & (ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == BWStream_V_data_V1_status) & (ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter3)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((1'b0 == BWStream_V_data_V1_status) & (ap_reg_pp0_iter2_empty_n_4_reg_156 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign color_V_1_i_fu_125_p2 = (color_V_cast_i_fu_103_p1 + p_1_cast_i_fu_121_p1);

assign color_V_cast_i_fu_103_p1 = tmp_fu_93_p4;

assign empty_n_4_fu_77_p1 = empty_n_nbread_fu_54_p4_0;

assign empty_n_nbread_fu_54_p4_0 = stream_in_TVALID;

assign grp_fu_147_p0 = grp_fu_147_p00;

assign grp_fu_147_p00 = color_V_1_i_reg_175;

assign grp_fu_147_p1 = grp_fu_147_p10;

assign grp_fu_147_p10 = phitmp_cast_i_reg_170;

assign grp_fu_147_p2 = 22'd1366;

assign p_1_cast_i_fu_121_p1 = tmp_1_fu_117_p1;

assign start_out = real_start;

assign tmp_1_fu_117_p1 = stream_in_TDATA[7:0];

assign tmp_fu_93_p4 = {{stream_in_TDATA[23:16]}};

endmodule //BlackWhite
