// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Matrix (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        BWStream_V_data_V_dout,
        BWStream_V_data_V_empty_n,
        BWStream_V_data_V_read,
        BWStream_V_user_V_dout,
        BWStream_V_user_V_empty_n,
        BWStream_V_user_V_read,
        BWStream_V_last_V_dout,
        BWStream_V_last_V_empty_n,
        BWStream_V_last_V_read,
        PxlStream_V_pixel_da_8_din,
        PxlStream_V_pixel_da_8_full_n,
        PxlStream_V_pixel_da_8_write,
        PxlStream_V_pixel_da_7_din,
        PxlStream_V_pixel_da_7_full_n,
        PxlStream_V_pixel_da_7_write,
        PxlStream_V_pixel_da_6_din,
        PxlStream_V_pixel_da_6_full_n,
        PxlStream_V_pixel_da_6_write,
        PxlStream_V_pixel_da_5_din,
        PxlStream_V_pixel_da_5_full_n,
        PxlStream_V_pixel_da_5_write,
        PxlStream_V_pixel_da_4_din,
        PxlStream_V_pixel_da_4_full_n,
        PxlStream_V_pixel_da_4_write,
        PxlStream_V_pixel_da_3_din,
        PxlStream_V_pixel_da_3_full_n,
        PxlStream_V_pixel_da_3_write,
        PxlStream_V_pixel_da_2_din,
        PxlStream_V_pixel_da_2_full_n,
        PxlStream_V_pixel_da_2_write,
        PxlStream_V_pixel_da_1_din,
        PxlStream_V_pixel_da_1_full_n,
        PxlStream_V_pixel_da_1_write,
        PxlStream_V_pixel_da_din,
        PxlStream_V_pixel_da_full_n,
        PxlStream_V_pixel_da_write,
        PxlStream_V_pixel_us_8_din,
        PxlStream_V_pixel_us_8_full_n,
        PxlStream_V_pixel_us_8_write,
        PxlStream_V_pixel_us_7_din,
        PxlStream_V_pixel_us_7_full_n,
        PxlStream_V_pixel_us_7_write,
        PxlStream_V_pixel_us_6_din,
        PxlStream_V_pixel_us_6_full_n,
        PxlStream_V_pixel_us_6_write,
        PxlStream_V_pixel_us_5_din,
        PxlStream_V_pixel_us_5_full_n,
        PxlStream_V_pixel_us_5_write,
        PxlStream_V_pixel_us_4_din,
        PxlStream_V_pixel_us_4_full_n,
        PxlStream_V_pixel_us_4_write,
        PxlStream_V_pixel_us_3_din,
        PxlStream_V_pixel_us_3_full_n,
        PxlStream_V_pixel_us_3_write,
        PxlStream_V_pixel_us_2_din,
        PxlStream_V_pixel_us_2_full_n,
        PxlStream_V_pixel_us_2_write,
        PxlStream_V_pixel_us_1_din,
        PxlStream_V_pixel_us_1_full_n,
        PxlStream_V_pixel_us_1_write,
        PxlStream_V_pixel_us_din,
        PxlStream_V_pixel_us_full_n,
        PxlStream_V_pixel_us_write,
        PxlStream_V_pixel_la_8_din,
        PxlStream_V_pixel_la_8_full_n,
        PxlStream_V_pixel_la_8_write,
        PxlStream_V_pixel_la_7_din,
        PxlStream_V_pixel_la_7_full_n,
        PxlStream_V_pixel_la_7_write,
        PxlStream_V_pixel_la_6_din,
        PxlStream_V_pixel_la_6_full_n,
        PxlStream_V_pixel_la_6_write,
        PxlStream_V_pixel_la_5_din,
        PxlStream_V_pixel_la_5_full_n,
        PxlStream_V_pixel_la_5_write,
        PxlStream_V_pixel_la_4_din,
        PxlStream_V_pixel_la_4_full_n,
        PxlStream_V_pixel_la_4_write,
        PxlStream_V_pixel_la_3_din,
        PxlStream_V_pixel_la_3_full_n,
        PxlStream_V_pixel_la_3_write,
        PxlStream_V_pixel_la_2_din,
        PxlStream_V_pixel_la_2_full_n,
        PxlStream_V_pixel_la_2_write,
        PxlStream_V_pixel_la_1_din,
        PxlStream_V_pixel_la_1_full_n,
        PxlStream_V_pixel_la_1_write,
        PxlStream_V_pixel_la_din,
        PxlStream_V_pixel_la_full_n,
        PxlStream_V_pixel_la_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] BWStream_V_data_V_dout;
input   BWStream_V_data_V_empty_n;
output   BWStream_V_data_V_read;
input  [0:0] BWStream_V_user_V_dout;
input   BWStream_V_user_V_empty_n;
output   BWStream_V_user_V_read;
input  [0:0] BWStream_V_last_V_dout;
input   BWStream_V_last_V_empty_n;
output   BWStream_V_last_V_read;
output  [7:0] PxlStream_V_pixel_da_8_din;
input   PxlStream_V_pixel_da_8_full_n;
output   PxlStream_V_pixel_da_8_write;
output  [7:0] PxlStream_V_pixel_da_7_din;
input   PxlStream_V_pixel_da_7_full_n;
output   PxlStream_V_pixel_da_7_write;
output  [7:0] PxlStream_V_pixel_da_6_din;
input   PxlStream_V_pixel_da_6_full_n;
output   PxlStream_V_pixel_da_6_write;
output  [7:0] PxlStream_V_pixel_da_5_din;
input   PxlStream_V_pixel_da_5_full_n;
output   PxlStream_V_pixel_da_5_write;
output  [7:0] PxlStream_V_pixel_da_4_din;
input   PxlStream_V_pixel_da_4_full_n;
output   PxlStream_V_pixel_da_4_write;
output  [7:0] PxlStream_V_pixel_da_3_din;
input   PxlStream_V_pixel_da_3_full_n;
output   PxlStream_V_pixel_da_3_write;
output  [7:0] PxlStream_V_pixel_da_2_din;
input   PxlStream_V_pixel_da_2_full_n;
output   PxlStream_V_pixel_da_2_write;
output  [7:0] PxlStream_V_pixel_da_1_din;
input   PxlStream_V_pixel_da_1_full_n;
output   PxlStream_V_pixel_da_1_write;
output  [7:0] PxlStream_V_pixel_da_din;
input   PxlStream_V_pixel_da_full_n;
output   PxlStream_V_pixel_da_write;
output  [0:0] PxlStream_V_pixel_us_8_din;
input   PxlStream_V_pixel_us_8_full_n;
output   PxlStream_V_pixel_us_8_write;
output  [0:0] PxlStream_V_pixel_us_7_din;
input   PxlStream_V_pixel_us_7_full_n;
output   PxlStream_V_pixel_us_7_write;
output  [0:0] PxlStream_V_pixel_us_6_din;
input   PxlStream_V_pixel_us_6_full_n;
output   PxlStream_V_pixel_us_6_write;
output  [0:0] PxlStream_V_pixel_us_5_din;
input   PxlStream_V_pixel_us_5_full_n;
output   PxlStream_V_pixel_us_5_write;
output  [0:0] PxlStream_V_pixel_us_4_din;
input   PxlStream_V_pixel_us_4_full_n;
output   PxlStream_V_pixel_us_4_write;
output  [0:0] PxlStream_V_pixel_us_3_din;
input   PxlStream_V_pixel_us_3_full_n;
output   PxlStream_V_pixel_us_3_write;
output  [0:0] PxlStream_V_pixel_us_2_din;
input   PxlStream_V_pixel_us_2_full_n;
output   PxlStream_V_pixel_us_2_write;
output  [0:0] PxlStream_V_pixel_us_1_din;
input   PxlStream_V_pixel_us_1_full_n;
output   PxlStream_V_pixel_us_1_write;
output  [0:0] PxlStream_V_pixel_us_din;
input   PxlStream_V_pixel_us_full_n;
output   PxlStream_V_pixel_us_write;
output  [0:0] PxlStream_V_pixel_la_8_din;
input   PxlStream_V_pixel_la_8_full_n;
output   PxlStream_V_pixel_la_8_write;
output  [0:0] PxlStream_V_pixel_la_7_din;
input   PxlStream_V_pixel_la_7_full_n;
output   PxlStream_V_pixel_la_7_write;
output  [0:0] PxlStream_V_pixel_la_6_din;
input   PxlStream_V_pixel_la_6_full_n;
output   PxlStream_V_pixel_la_6_write;
output  [0:0] PxlStream_V_pixel_la_5_din;
input   PxlStream_V_pixel_la_5_full_n;
output   PxlStream_V_pixel_la_5_write;
output  [0:0] PxlStream_V_pixel_la_4_din;
input   PxlStream_V_pixel_la_4_full_n;
output   PxlStream_V_pixel_la_4_write;
output  [0:0] PxlStream_V_pixel_la_3_din;
input   PxlStream_V_pixel_la_3_full_n;
output   PxlStream_V_pixel_la_3_write;
output  [0:0] PxlStream_V_pixel_la_2_din;
input   PxlStream_V_pixel_la_2_full_n;
output   PxlStream_V_pixel_la_2_write;
output  [0:0] PxlStream_V_pixel_la_1_din;
input   PxlStream_V_pixel_la_1_full_n;
output   PxlStream_V_pixel_la_1_write;
output  [0:0] PxlStream_V_pixel_la_din;
input   PxlStream_V_pixel_la_full_n;
output   PxlStream_V_pixel_la_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    internal_ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    PxlStream_V_pixel_da1_status;
reg   [0:0] empty_n_2_reg_592;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
reg    start_once_reg;
reg   [7:0] m_pixel_data_V_2_1;
reg   [0:0] m_pixel_user_V_2_1;
reg   [0:0] m_pixel_last_V_2_1;
reg   [7:0] m_pixel_data_V_2_0;
reg   [0:0] m_pixel_user_V_2_0;
reg   [0:0] m_pixel_last_V_2_0;
reg   [7:0] m_pixel_data_V_1_2;
reg   [0:0] m_pixel_user_V_1_2;
reg   [0:0] m_pixel_last_V_1_2;
reg   [7:0] m_pixel_data_V_1_1;
reg   [0:0] m_pixel_user_V_1_1;
reg   [0:0] m_pixel_last_V_1_1;
reg   [7:0] m_pixel_data_V_1_0;
reg   [0:0] m_pixel_user_V_1_0;
reg   [0:0] m_pixel_last_V_1_0;
reg   [7:0] m_pixel_data_V_0_2;
reg   [0:0] m_pixel_user_V_0_2;
reg   [0:0] m_pixel_last_V_0_2;
reg   [7:0] m_pixel_data_V_0_1;
reg   [0:0] m_pixel_user_V_0_1;
reg   [0:0] m_pixel_last_V_0_1;
reg   [7:0] m_pixel_data_V_0_0;
reg   [0:0] m_pixel_user_V_0_0;
reg   [0:0] m_pixel_last_V_0_0;
reg    line_1_Array_data_V_ce0;
reg    line_1_Array_data_V_we0;
wire   [7:0] line_1_Array_data_V_q0;
reg    line_1_Array_user_V_ce0;
reg    line_1_Array_user_V_we0;
wire   [0:0] line_1_Array_user_V_q0;
reg    line_1_Array_last_V_ce0;
reg    line_1_Array_last_V_we0;
wire   [0:0] line_1_Array_last_V_q0;
reg    line_0_Array_data_V_ce0;
reg    line_0_Array_data_V_we0;
wire   [7:0] line_0_Array_data_V_q0;
reg    line_0_Array_user_V_ce0;
reg    line_0_Array_user_V_we0;
wire   [0:0] line_0_Array_user_V_q0;
reg    line_0_Array_last_V_ce0;
reg    line_0_Array_last_V_we0;
wire   [0:0] line_0_Array_last_V_q0;
reg    PxlStream_V_pixel_da_8_blk_n;
wire    ap_block_pp0_stage0_flag00000000;
reg    PxlStream_V_pixel_da_7_blk_n;
reg    PxlStream_V_pixel_da_6_blk_n;
reg    PxlStream_V_pixel_da_5_blk_n;
reg    PxlStream_V_pixel_da_4_blk_n;
reg    PxlStream_V_pixel_da_3_blk_n;
reg    PxlStream_V_pixel_da_2_blk_n;
reg    PxlStream_V_pixel_da_1_blk_n;
reg    PxlStream_V_pixel_da_blk_n;
reg    PxlStream_V_pixel_us_8_blk_n;
reg    PxlStream_V_pixel_us_7_blk_n;
reg    PxlStream_V_pixel_us_6_blk_n;
reg    PxlStream_V_pixel_us_5_blk_n;
reg    PxlStream_V_pixel_us_4_blk_n;
reg    PxlStream_V_pixel_us_3_blk_n;
reg    PxlStream_V_pixel_us_2_blk_n;
reg    PxlStream_V_pixel_us_1_blk_n;
reg    PxlStream_V_pixel_us_blk_n;
reg    PxlStream_V_pixel_la_8_blk_n;
reg    PxlStream_V_pixel_la_7_blk_n;
reg    PxlStream_V_pixel_la_6_blk_n;
reg    PxlStream_V_pixel_la_5_blk_n;
reg    PxlStream_V_pixel_la_4_blk_n;
reg    PxlStream_V_pixel_la_3_blk_n;
reg    PxlStream_V_pixel_la_2_blk_n;
reg    PxlStream_V_pixel_la_1_blk_n;
reg    PxlStream_V_pixel_la_blk_n;
reg   [7:0] tmp_data_V_reg_596;
reg   [0:0] tmp_user_V_reg_602;
reg   [0:0] tmp_last_V_reg_608;
reg    ap_block_pp0_stage0_flag00011011;
reg    BWStream_V_data_V0_update;
wire   [0:0] empty_n_nbread_fu_160_p4_0;
reg    PxlStream_V_pixel_da1_update;
reg    ap_block_pp0_stage0_flag00001001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 start_once_reg = 1'b0;
#0 m_pixel_data_V_2_1 = 8'd0;
#0 m_pixel_user_V_2_1 = 1'd0;
#0 m_pixel_last_V_2_1 = 1'd0;
#0 m_pixel_data_V_2_0 = 8'd0;
#0 m_pixel_user_V_2_0 = 1'd0;
#0 m_pixel_last_V_2_0 = 1'd0;
#0 m_pixel_data_V_1_2 = 8'd0;
#0 m_pixel_user_V_1_2 = 1'd0;
#0 m_pixel_last_V_1_2 = 1'd0;
#0 m_pixel_data_V_1_1 = 8'd0;
#0 m_pixel_user_V_1_1 = 1'd0;
#0 m_pixel_last_V_1_1 = 1'd0;
#0 m_pixel_data_V_1_0 = 8'd0;
#0 m_pixel_user_V_1_0 = 1'd0;
#0 m_pixel_last_V_1_0 = 1'd0;
#0 m_pixel_data_V_0_2 = 8'd0;
#0 m_pixel_user_V_0_2 = 1'd0;
#0 m_pixel_last_V_0_2 = 1'd0;
#0 m_pixel_data_V_0_1 = 8'd0;
#0 m_pixel_user_V_0_1 = 1'd0;
#0 m_pixel_last_V_0_1 = 1'd0;
#0 m_pixel_data_V_0_0 = 8'd0;
#0 m_pixel_user_V_0_0 = 1'd0;
#0 m_pixel_last_V_0_0 = 1'd0;
end

Matrix_line_1_Arrcud #(
    .DataWidth( 8 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_1_Array_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_1_Array_data_V_ce0),
    .we0(line_1_Array_data_V_we0),
    .d0(m_pixel_data_V_1_2),
    .q0(line_1_Array_data_V_q0)
);

Matrix_line_1_ArrdEe #(
    .DataWidth( 1 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_1_Array_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_1_Array_user_V_ce0),
    .we0(line_1_Array_user_V_we0),
    .d0(m_pixel_user_V_1_2),
    .q0(line_1_Array_user_V_q0)
);

Matrix_line_1_ArrdEe #(
    .DataWidth( 1 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_1_Array_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_1_Array_last_V_ce0),
    .we0(line_1_Array_last_V_we0),
    .d0(m_pixel_last_V_1_2),
    .q0(line_1_Array_last_V_q0)
);

Matrix_line_1_Arrcud #(
    .DataWidth( 8 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_0_Array_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_0_Array_data_V_ce0),
    .we0(line_0_Array_data_V_we0),
    .d0(m_pixel_data_V_0_2),
    .q0(line_0_Array_data_V_q0)
);

Matrix_line_1_ArrdEe #(
    .DataWidth( 1 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_0_Array_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_0_Array_user_V_ce0),
    .we0(line_0_Array_user_V_we0),
    .d0(m_pixel_user_V_0_2),
    .q0(line_0_Array_user_V_q0)
);

Matrix_line_1_ArrdEe #(
    .DataWidth( 1 ),
    .AddressRange( 1277 ),
    .AddressWidth( 11 ))
line_0_Array_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(11'd1276),
    .ce0(line_0_Array_last_V_ce0),
    .we0(line_0_Array_last_V_we0),
    .d0(m_pixel_last_V_0_2),
    .q0(line_0_Array_last_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        empty_n_2_reg_592 <= empty_n_nbread_fu_160_p4_0;
        tmp_data_V_reg_596 <= BWStream_V_data_V_dout;
        tmp_last_V_reg_608 <= BWStream_V_last_V_dout;
        tmp_user_V_reg_602 <= BWStream_V_user_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        m_pixel_data_V_0_0 <= tmp_data_V_reg_596;
        m_pixel_data_V_0_1 <= m_pixel_data_V_0_0;
        m_pixel_data_V_0_2 <= m_pixel_data_V_0_1;
        m_pixel_data_V_1_0 <= line_0_Array_data_V_q0;
        m_pixel_data_V_1_1 <= m_pixel_data_V_1_0;
        m_pixel_data_V_1_2 <= m_pixel_data_V_1_1;
        m_pixel_data_V_2_0 <= line_1_Array_data_V_q0;
        m_pixel_data_V_2_1 <= m_pixel_data_V_2_0;
        m_pixel_last_V_0_0 <= tmp_last_V_reg_608;
        m_pixel_last_V_0_1 <= m_pixel_last_V_0_0;
        m_pixel_last_V_0_2 <= m_pixel_last_V_0_1;
        m_pixel_last_V_1_0 <= line_0_Array_last_V_q0;
        m_pixel_last_V_1_1 <= m_pixel_last_V_1_0;
        m_pixel_last_V_1_2 <= m_pixel_last_V_1_1;
        m_pixel_last_V_2_0 <= line_1_Array_last_V_q0;
        m_pixel_last_V_2_1 <= m_pixel_last_V_2_0;
        m_pixel_user_V_0_0 <= tmp_user_V_reg_602;
        m_pixel_user_V_0_1 <= m_pixel_user_V_0_0;
        m_pixel_user_V_0_2 <= m_pixel_user_V_0_1;
        m_pixel_user_V_1_0 <= line_0_Array_user_V_q0;
        m_pixel_user_V_1_1 <= m_pixel_user_V_1_0;
        m_pixel_user_V_1_2 <= m_pixel_user_V_1_1;
        m_pixel_user_V_2_0 <= line_1_Array_user_V_q0;
        m_pixel_user_V_2_1 <= m_pixel_user_V_2_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == real_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == (BWStream_V_data_V_empty_n & BWStream_V_user_V_empty_n & BWStream_V_last_V_empty_n)))) begin
        BWStream_V_data_V0_update = 1'b1;
    end else begin
        BWStream_V_data_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        PxlStream_V_pixel_da1_update = 1'b1;
    end else begin
        PxlStream_V_pixel_da1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_1_blk_n = PxlStream_V_pixel_da_1_full_n;
    end else begin
        PxlStream_V_pixel_da_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_2_blk_n = PxlStream_V_pixel_da_2_full_n;
    end else begin
        PxlStream_V_pixel_da_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_3_blk_n = PxlStream_V_pixel_da_3_full_n;
    end else begin
        PxlStream_V_pixel_da_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_4_blk_n = PxlStream_V_pixel_da_4_full_n;
    end else begin
        PxlStream_V_pixel_da_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_5_blk_n = PxlStream_V_pixel_da_5_full_n;
    end else begin
        PxlStream_V_pixel_da_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_6_blk_n = PxlStream_V_pixel_da_6_full_n;
    end else begin
        PxlStream_V_pixel_da_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_7_blk_n = PxlStream_V_pixel_da_7_full_n;
    end else begin
        PxlStream_V_pixel_da_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_8_blk_n = PxlStream_V_pixel_da_8_full_n;
    end else begin
        PxlStream_V_pixel_da_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_da_blk_n = PxlStream_V_pixel_da_full_n;
    end else begin
        PxlStream_V_pixel_da_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_1_blk_n = PxlStream_V_pixel_la_1_full_n;
    end else begin
        PxlStream_V_pixel_la_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_2_blk_n = PxlStream_V_pixel_la_2_full_n;
    end else begin
        PxlStream_V_pixel_la_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_3_blk_n = PxlStream_V_pixel_la_3_full_n;
    end else begin
        PxlStream_V_pixel_la_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_4_blk_n = PxlStream_V_pixel_la_4_full_n;
    end else begin
        PxlStream_V_pixel_la_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_5_blk_n = PxlStream_V_pixel_la_5_full_n;
    end else begin
        PxlStream_V_pixel_la_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_6_blk_n = PxlStream_V_pixel_la_6_full_n;
    end else begin
        PxlStream_V_pixel_la_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_7_blk_n = PxlStream_V_pixel_la_7_full_n;
    end else begin
        PxlStream_V_pixel_la_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_8_blk_n = PxlStream_V_pixel_la_8_full_n;
    end else begin
        PxlStream_V_pixel_la_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_la_blk_n = PxlStream_V_pixel_la_full_n;
    end else begin
        PxlStream_V_pixel_la_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_1_blk_n = PxlStream_V_pixel_us_1_full_n;
    end else begin
        PxlStream_V_pixel_us_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_2_blk_n = PxlStream_V_pixel_us_2_full_n;
    end else begin
        PxlStream_V_pixel_us_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_3_blk_n = PxlStream_V_pixel_us_3_full_n;
    end else begin
        PxlStream_V_pixel_us_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_4_blk_n = PxlStream_V_pixel_us_4_full_n;
    end else begin
        PxlStream_V_pixel_us_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_5_blk_n = PxlStream_V_pixel_us_5_full_n;
    end else begin
        PxlStream_V_pixel_us_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_6_blk_n = PxlStream_V_pixel_us_6_full_n;
    end else begin
        PxlStream_V_pixel_us_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_7_blk_n = PxlStream_V_pixel_us_7_full_n;
    end else begin
        PxlStream_V_pixel_us_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_8_blk_n = PxlStream_V_pixel_us_8_full_n;
    end else begin
        PxlStream_V_pixel_us_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        PxlStream_V_pixel_us_blk_n = PxlStream_V_pixel_us_full_n;
    end else begin
        PxlStream_V_pixel_us_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_enable_reg_pp0_iter0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_idle_pp0_0to0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == real_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_data_V_ce0 = 1'd1;
    end else begin
        line_0_Array_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_data_V_we0 = 1'd1;
    end else begin
        line_0_Array_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_last_V_ce0 = 1'd1;
    end else begin
        line_0_Array_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_last_V_we0 = 1'd1;
    end else begin
        line_0_Array_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_user_V_ce0 = 1'd1;
    end else begin
        line_0_Array_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_0_Array_user_V_we0 = 1'd1;
    end else begin
        line_0_Array_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_data_V_ce0 = 1'd1;
    end else begin
        line_1_Array_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_data_V_we0 = 1'd1;
    end else begin
        line_1_Array_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_last_V_ce0 = 1'd1;
    end else begin
        line_1_Array_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_last_V_we0 = 1'd1;
    end else begin
        line_1_Array_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_user_V_ce0 = 1'd1;
    end else begin
        line_1_Array_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        line_1_Array_user_V_we0 = 1'd1;
    end else begin
        line_1_Array_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BWStream_V_data_V_read = BWStream_V_data_V0_update;

assign BWStream_V_last_V_read = BWStream_V_data_V0_update;

assign BWStream_V_user_V_read = BWStream_V_data_V0_update;

assign PxlStream_V_pixel_da1_status = (PxlStream_V_pixel_da_8_full_n & PxlStream_V_pixel_da_7_full_n & PxlStream_V_pixel_da_6_full_n & PxlStream_V_pixel_da_5_full_n & PxlStream_V_pixel_da_4_full_n & PxlStream_V_pixel_da_3_full_n & PxlStream_V_pixel_da_2_full_n & PxlStream_V_pixel_da_1_full_n & PxlStream_V_pixel_da_full_n & PxlStream_V_pixel_us_8_full_n & PxlStream_V_pixel_us_7_full_n & PxlStream_V_pixel_us_6_full_n & PxlStream_V_pixel_us_5_full_n & PxlStream_V_pixel_us_4_full_n & PxlStream_V_pixel_us_3_full_n & PxlStream_V_pixel_us_2_full_n & PxlStream_V_pixel_us_1_full_n & PxlStream_V_pixel_us_full_n & PxlStream_V_pixel_la_8_full_n & PxlStream_V_pixel_la_7_full_n & PxlStream_V_pixel_la_6_full_n & PxlStream_V_pixel_la_5_full_n & PxlStream_V_pixel_la_4_full_n & PxlStream_V_pixel_la_3_full_n & PxlStream_V_pixel_la_2_full_n & PxlStream_V_pixel_la_1_full_n & PxlStream_V_pixel_la_full_n);

assign PxlStream_V_pixel_da_1_din = m_pixel_data_V_2_0;

assign PxlStream_V_pixel_da_1_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_2_din = line_1_Array_data_V_q0;

assign PxlStream_V_pixel_da_2_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_3_din = m_pixel_data_V_1_1;

assign PxlStream_V_pixel_da_3_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_4_din = m_pixel_data_V_1_0;

assign PxlStream_V_pixel_da_4_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_5_din = line_0_Array_data_V_q0;

assign PxlStream_V_pixel_da_5_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_6_din = m_pixel_data_V_0_1;

assign PxlStream_V_pixel_da_6_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_7_din = m_pixel_data_V_0_0;

assign PxlStream_V_pixel_da_7_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_8_din = tmp_data_V_reg_596;

assign PxlStream_V_pixel_da_8_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_da_din = m_pixel_data_V_2_1;

assign PxlStream_V_pixel_da_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_1_din = m_pixel_last_V_2_0;

assign PxlStream_V_pixel_la_1_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_2_din = line_1_Array_last_V_q0;

assign PxlStream_V_pixel_la_2_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_3_din = m_pixel_last_V_1_1;

assign PxlStream_V_pixel_la_3_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_4_din = m_pixel_last_V_1_0;

assign PxlStream_V_pixel_la_4_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_5_din = line_0_Array_last_V_q0;

assign PxlStream_V_pixel_la_5_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_6_din = m_pixel_last_V_0_1;

assign PxlStream_V_pixel_la_6_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_7_din = m_pixel_last_V_0_0;

assign PxlStream_V_pixel_la_7_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_8_din = tmp_last_V_reg_608;

assign PxlStream_V_pixel_la_8_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_la_din = m_pixel_last_V_2_1;

assign PxlStream_V_pixel_la_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_1_din = m_pixel_user_V_2_0;

assign PxlStream_V_pixel_us_1_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_2_din = line_1_Array_user_V_q0;

assign PxlStream_V_pixel_us_2_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_3_din = m_pixel_user_V_1_1;

assign PxlStream_V_pixel_us_3_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_4_din = m_pixel_user_V_1_0;

assign PxlStream_V_pixel_us_4_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_5_din = line_0_Array_user_V_q0;

assign PxlStream_V_pixel_us_5_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_6_din = m_pixel_user_V_0_1;

assign PxlStream_V_pixel_us_6_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_7_din = m_pixel_user_V_0_0;

assign PxlStream_V_pixel_us_7_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_8_din = tmp_user_V_reg_602;

assign PxlStream_V_pixel_us_8_write = PxlStream_V_pixel_da1_update;

assign PxlStream_V_pixel_us_din = m_pixel_user_V_2_1;

assign PxlStream_V_pixel_us_write = PxlStream_V_pixel_da1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == PxlStream_V_pixel_da1_status) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == PxlStream_V_pixel_da1_status) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((ap_done_reg == 1'b1) | ((1'b1 == real_start) & ((1'b0 == real_start) | (ap_done_reg == 1'b1))) | ((1'b0 == PxlStream_V_pixel_da1_status) & (empty_n_2_reg_592 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == PxlStream_V_pixel_da1_status) & (empty_n_2_reg_592 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign empty_n_nbread_fu_160_p4_0 = (BWStream_V_data_V_empty_n & BWStream_V_user_V_empty_n & BWStream_V_last_V_empty_n);

assign start_out = real_start;

endmodule //Matrix
