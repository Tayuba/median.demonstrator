-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Matrix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    BWStream_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    BWStream_V_data_V_empty_n : IN STD_LOGIC;
    BWStream_V_data_V_read : OUT STD_LOGIC;
    BWStream_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    BWStream_V_user_V_empty_n : IN STD_LOGIC;
    BWStream_V_user_V_read : OUT STD_LOGIC;
    BWStream_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    BWStream_V_last_V_empty_n : IN STD_LOGIC;
    BWStream_V_last_V_read : OUT STD_LOGIC;
    PxlStream_V_pixel_da_8_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_8_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_8_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_7_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_7_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_6_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_6_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_5_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_5_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_4_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_4_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_3_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_3_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_2_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_2_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_1_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_1_write : OUT STD_LOGIC;
    PxlStream_V_pixel_da_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    PxlStream_V_pixel_da_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_da_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_8_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_8_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_7_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_7_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_6_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_6_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_6_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_5_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_5_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_5_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_4_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_4_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_4_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_3_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_3_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_2_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_2_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_1_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_1_write : OUT STD_LOGIC;
    PxlStream_V_pixel_us_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_us_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_us_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_8_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_8_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_7_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_7_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_6_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_6_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_6_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_5_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_5_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_5_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_4_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_4_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_4_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_3_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_3_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_2_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_2_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_1_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_1_write : OUT STD_LOGIC;
    PxlStream_V_pixel_la_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    PxlStream_V_pixel_la_full_n : IN STD_LOGIC;
    PxlStream_V_pixel_la_write : OUT STD_LOGIC );
end;


architecture behav of Matrix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv11_4FC : STD_LOGIC_VECTOR (10 downto 0) := "10011111100";

    signal real_start : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal PxlStream_V_pixel_da1_status : STD_LOGIC;
    signal empty_n_2_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal start_once_reg : STD_LOGIC := '0';
    signal m_pixel_data_V_2_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_2_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_2_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_2_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_2_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_2_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_1_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_1_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_1_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_1_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_1_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_1_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_1_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_0_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_0_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_0_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_0_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_0_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_0_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_data_V_0_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_pixel_user_V_0_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal m_pixel_last_V_0_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal line_1_Array_data_V_ce0 : STD_LOGIC;
    signal line_1_Array_data_V_we0 : STD_LOGIC;
    signal line_1_Array_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_1_Array_user_V_ce0 : STD_LOGIC;
    signal line_1_Array_user_V_we0 : STD_LOGIC;
    signal line_1_Array_user_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_1_Array_last_V_ce0 : STD_LOGIC;
    signal line_1_Array_last_V_we0 : STD_LOGIC;
    signal line_1_Array_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_0_Array_data_V_ce0 : STD_LOGIC;
    signal line_0_Array_data_V_we0 : STD_LOGIC;
    signal line_0_Array_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_0_Array_user_V_ce0 : STD_LOGIC;
    signal line_0_Array_user_V_we0 : STD_LOGIC;
    signal line_0_Array_user_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_0_Array_last_V_ce0 : STD_LOGIC;
    signal line_0_Array_last_V_we0 : STD_LOGIC;
    signal line_0_Array_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_da_8_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal PxlStream_V_pixel_da_7_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_6_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_5_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_4_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_3_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_2_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_1_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_8_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_7_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_6_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_5_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_4_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_3_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_2_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_1_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_8_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_7_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_6_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_5_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_4_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_3_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_2_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_1_blk_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_596 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal BWStream_V_data_V0_update : STD_LOGIC;
    signal empty_n_nbread_fu_160_p4_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_da1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Matrix_line_1_Arrcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Matrix_line_1_ArrdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    line_1_Array_data_V_U : component Matrix_line_1_Arrcud
    generic map (
        DataWidth => 8,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_1_Array_data_V_ce0,
        we0 => line_1_Array_data_V_we0,
        d0 => m_pixel_data_V_1_2,
        q0 => line_1_Array_data_V_q0);

    line_1_Array_user_V_U : component Matrix_line_1_ArrdEe
    generic map (
        DataWidth => 1,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_1_Array_user_V_ce0,
        we0 => line_1_Array_user_V_we0,
        d0 => m_pixel_user_V_1_2,
        q0 => line_1_Array_user_V_q0);

    line_1_Array_last_V_U : component Matrix_line_1_ArrdEe
    generic map (
        DataWidth => 1,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_1_Array_last_V_ce0,
        we0 => line_1_Array_last_V_we0,
        d0 => m_pixel_last_V_1_2,
        q0 => line_1_Array_last_V_q0);

    line_0_Array_data_V_U : component Matrix_line_1_Arrcud
    generic map (
        DataWidth => 8,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_0_Array_data_V_ce0,
        we0 => line_0_Array_data_V_we0,
        d0 => m_pixel_data_V_0_2,
        q0 => line_0_Array_data_V_q0);

    line_0_Array_user_V_U : component Matrix_line_1_ArrdEe
    generic map (
        DataWidth => 1,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_0_Array_user_V_ce0,
        we0 => line_0_Array_user_V_we0,
        d0 => m_pixel_user_V_0_2,
        q0 => line_0_Array_user_V_q0);

    line_0_Array_last_V_U : component Matrix_line_1_ArrdEe
    generic map (
        DataWidth => 1,
        AddressRange => 1277,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv11_4FC,
        ce0 => line_0_Array_last_V_ce0,
        we0 => line_0_Array_last_V_we0,
        d0 => m_pixel_last_V_0_2,
        q0 => line_0_Array_last_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                empty_n_2_reg_592 <= empty_n_nbread_fu_160_p4_0;
                tmp_data_V_reg_596 <= BWStream_V_data_V_dout;
                tmp_last_V_reg_608 <= BWStream_V_last_V_dout;
                tmp_user_V_reg_602 <= BWStream_V_user_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                m_pixel_data_V_0_0 <= tmp_data_V_reg_596;
                m_pixel_data_V_0_1 <= m_pixel_data_V_0_0;
                m_pixel_data_V_0_2 <= m_pixel_data_V_0_1;
                m_pixel_data_V_1_0 <= line_0_Array_data_V_q0;
                m_pixel_data_V_1_1 <= m_pixel_data_V_1_0;
                m_pixel_data_V_1_2 <= m_pixel_data_V_1_1;
                m_pixel_data_V_2_0 <= line_1_Array_data_V_q0;
                m_pixel_data_V_2_1 <= m_pixel_data_V_2_0;
                m_pixel_last_V_0_0 <= tmp_last_V_reg_608;
                m_pixel_last_V_0_1 <= m_pixel_last_V_0_0;
                m_pixel_last_V_0_2 <= m_pixel_last_V_0_1;
                m_pixel_last_V_1_0 <= line_0_Array_last_V_q0;
                m_pixel_last_V_1_1 <= m_pixel_last_V_1_0;
                m_pixel_last_V_1_2 <= m_pixel_last_V_1_1;
                m_pixel_last_V_2_0 <= line_1_Array_last_V_q0;
                m_pixel_last_V_2_1 <= m_pixel_last_V_2_0;
                m_pixel_user_V_0_0 <= tmp_user_V_reg_602;
                m_pixel_user_V_0_1 <= m_pixel_user_V_0_0;
                m_pixel_user_V_0_2 <= m_pixel_user_V_0_1;
                m_pixel_user_V_1_0 <= line_0_Array_user_V_q0;
                m_pixel_user_V_1_1 <= m_pixel_user_V_1_0;
                m_pixel_user_V_1_2 <= m_pixel_user_V_1_1;
                m_pixel_user_V_2_0 <= line_1_Array_user_V_q0;
                m_pixel_user_V_2_1 <= m_pixel_user_V_2_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    BWStream_V_data_V0_update_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, BWStream_V_data_V_empty_n, BWStream_V_user_V_empty_n, BWStream_V_last_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = real_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = (BWStream_V_data_V_empty_n and BWStream_V_user_V_empty_n and BWStream_V_last_V_empty_n)))) then 
            BWStream_V_data_V0_update <= ap_const_logic_1;
        else 
            BWStream_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    BWStream_V_data_V_read <= BWStream_V_data_V0_update;
    BWStream_V_last_V_read <= BWStream_V_data_V0_update;
    BWStream_V_user_V_read <= BWStream_V_data_V0_update;
    PxlStream_V_pixel_da1_status <= (PxlStream_V_pixel_da_8_full_n and PxlStream_V_pixel_da_7_full_n and PxlStream_V_pixel_da_6_full_n and PxlStream_V_pixel_da_5_full_n and PxlStream_V_pixel_da_4_full_n and PxlStream_V_pixel_da_3_full_n and PxlStream_V_pixel_da_2_full_n and PxlStream_V_pixel_da_1_full_n and PxlStream_V_pixel_da_full_n and PxlStream_V_pixel_us_8_full_n and PxlStream_V_pixel_us_7_full_n and PxlStream_V_pixel_us_6_full_n and PxlStream_V_pixel_us_5_full_n and PxlStream_V_pixel_us_4_full_n and PxlStream_V_pixel_us_3_full_n and PxlStream_V_pixel_us_2_full_n and PxlStream_V_pixel_us_1_full_n and PxlStream_V_pixel_us_full_n and PxlStream_V_pixel_la_8_full_n and PxlStream_V_pixel_la_7_full_n and PxlStream_V_pixel_la_6_full_n and PxlStream_V_pixel_la_5_full_n and PxlStream_V_pixel_la_4_full_n and PxlStream_V_pixel_la_3_full_n and PxlStream_V_pixel_la_2_full_n and PxlStream_V_pixel_la_1_full_n and PxlStream_V_pixel_la_full_n);

    PxlStream_V_pixel_da1_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da1_update <= ap_const_logic_1;
        else 
            PxlStream_V_pixel_da1_update <= ap_const_logic_0;
        end if; 
    end process;


    PxlStream_V_pixel_da_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_1_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_1_blk_n <= PxlStream_V_pixel_da_1_full_n;
        else 
            PxlStream_V_pixel_da_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_1_din <= m_pixel_data_V_2_0;
    PxlStream_V_pixel_da_1_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_2_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_2_blk_n <= PxlStream_V_pixel_da_2_full_n;
        else 
            PxlStream_V_pixel_da_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_2_din <= line_1_Array_data_V_q0;
    PxlStream_V_pixel_da_2_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_3_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_3_blk_n <= PxlStream_V_pixel_da_3_full_n;
        else 
            PxlStream_V_pixel_da_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_3_din <= m_pixel_data_V_1_1;
    PxlStream_V_pixel_da_3_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_4_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_4_blk_n <= PxlStream_V_pixel_da_4_full_n;
        else 
            PxlStream_V_pixel_da_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_4_din <= m_pixel_data_V_1_0;
    PxlStream_V_pixel_da_4_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_5_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_5_blk_n <= PxlStream_V_pixel_da_5_full_n;
        else 
            PxlStream_V_pixel_da_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_5_din <= line_0_Array_data_V_q0;
    PxlStream_V_pixel_da_5_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_6_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_6_blk_n <= PxlStream_V_pixel_da_6_full_n;
        else 
            PxlStream_V_pixel_da_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_6_din <= m_pixel_data_V_0_1;
    PxlStream_V_pixel_da_6_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_7_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_7_blk_n <= PxlStream_V_pixel_da_7_full_n;
        else 
            PxlStream_V_pixel_da_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_7_din <= m_pixel_data_V_0_0;
    PxlStream_V_pixel_da_7_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_8_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_8_blk_n <= PxlStream_V_pixel_da_8_full_n;
        else 
            PxlStream_V_pixel_da_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_8_din <= tmp_data_V_reg_596;
    PxlStream_V_pixel_da_8_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_da_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_da_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_da_blk_n <= PxlStream_V_pixel_da_full_n;
        else 
            PxlStream_V_pixel_da_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_da_din <= m_pixel_data_V_2_1;
    PxlStream_V_pixel_da_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_1_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_1_blk_n <= PxlStream_V_pixel_la_1_full_n;
        else 
            PxlStream_V_pixel_la_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_1_din <= m_pixel_last_V_2_0;
    PxlStream_V_pixel_la_1_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_2_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_2_blk_n <= PxlStream_V_pixel_la_2_full_n;
        else 
            PxlStream_V_pixel_la_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_2_din <= line_1_Array_last_V_q0;
    PxlStream_V_pixel_la_2_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_3_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_3_blk_n <= PxlStream_V_pixel_la_3_full_n;
        else 
            PxlStream_V_pixel_la_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_3_din <= m_pixel_last_V_1_1;
    PxlStream_V_pixel_la_3_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_4_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_4_blk_n <= PxlStream_V_pixel_la_4_full_n;
        else 
            PxlStream_V_pixel_la_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_4_din <= m_pixel_last_V_1_0;
    PxlStream_V_pixel_la_4_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_5_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_5_blk_n <= PxlStream_V_pixel_la_5_full_n;
        else 
            PxlStream_V_pixel_la_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_5_din <= line_0_Array_last_V_q0;
    PxlStream_V_pixel_la_5_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_6_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_6_blk_n <= PxlStream_V_pixel_la_6_full_n;
        else 
            PxlStream_V_pixel_la_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_6_din <= m_pixel_last_V_0_1;
    PxlStream_V_pixel_la_6_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_7_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_7_blk_n <= PxlStream_V_pixel_la_7_full_n;
        else 
            PxlStream_V_pixel_la_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_7_din <= m_pixel_last_V_0_0;
    PxlStream_V_pixel_la_7_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_8_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_8_blk_n <= PxlStream_V_pixel_la_8_full_n;
        else 
            PxlStream_V_pixel_la_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_8_din <= tmp_last_V_reg_608;
    PxlStream_V_pixel_la_8_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_la_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_la_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_la_blk_n <= PxlStream_V_pixel_la_full_n;
        else 
            PxlStream_V_pixel_la_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_la_din <= m_pixel_last_V_2_1;
    PxlStream_V_pixel_la_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_1_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_1_blk_n <= PxlStream_V_pixel_us_1_full_n;
        else 
            PxlStream_V_pixel_us_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_1_din <= m_pixel_user_V_2_0;
    PxlStream_V_pixel_us_1_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_2_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_2_blk_n <= PxlStream_V_pixel_us_2_full_n;
        else 
            PxlStream_V_pixel_us_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_2_din <= line_1_Array_user_V_q0;
    PxlStream_V_pixel_us_2_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_3_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_3_blk_n <= PxlStream_V_pixel_us_3_full_n;
        else 
            PxlStream_V_pixel_us_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_3_din <= m_pixel_user_V_1_1;
    PxlStream_V_pixel_us_3_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_4_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_4_blk_n <= PxlStream_V_pixel_us_4_full_n;
        else 
            PxlStream_V_pixel_us_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_4_din <= m_pixel_user_V_1_0;
    PxlStream_V_pixel_us_4_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_5_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_5_blk_n <= PxlStream_V_pixel_us_5_full_n;
        else 
            PxlStream_V_pixel_us_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_5_din <= line_0_Array_user_V_q0;
    PxlStream_V_pixel_us_5_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_6_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_6_blk_n <= PxlStream_V_pixel_us_6_full_n;
        else 
            PxlStream_V_pixel_us_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_6_din <= m_pixel_user_V_0_1;
    PxlStream_V_pixel_us_6_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_7_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_7_blk_n <= PxlStream_V_pixel_us_7_full_n;
        else 
            PxlStream_V_pixel_us_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_7_din <= m_pixel_user_V_0_0;
    PxlStream_V_pixel_us_7_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_8_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_8_blk_n <= PxlStream_V_pixel_us_8_full_n;
        else 
            PxlStream_V_pixel_us_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_8_din <= tmp_user_V_reg_602;
    PxlStream_V_pixel_us_8_write <= PxlStream_V_pixel_da1_update;

    PxlStream_V_pixel_us_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, PxlStream_V_pixel_us_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            PxlStream_V_pixel_us_blk_n <= PxlStream_V_pixel_us_full_n;
        else 
            PxlStream_V_pixel_us_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    PxlStream_V_pixel_us_din <= m_pixel_user_V_2_1;
    PxlStream_V_pixel_us_write <= PxlStream_V_pixel_da1_update;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, PxlStream_V_pixel_da1_status, empty_n_2_reg_592)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = PxlStream_V_pixel_da1_status) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, PxlStream_V_pixel_da1_status, empty_n_2_reg_592)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = PxlStream_V_pixel_da1_status) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter1, PxlStream_V_pixel_da1_status, empty_n_2_reg_592)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = PxlStream_V_pixel_da1_status) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(PxlStream_V_pixel_da1_status, empty_n_2_reg_592)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_const_logic_0 = PxlStream_V_pixel_da1_status) and (empty_n_2_reg_592 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_const_logic_0 = ap_enable_reg_pp0_iter0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_idle_pp0_0to0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_n_nbread_fu_160_p4_0 <= (0=>(BWStream_V_data_V_empty_n and BWStream_V_user_V_empty_n and BWStream_V_last_V_empty_n), others=>'-');

    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = real_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_data_V_ce0 <= ap_const_logic_1;
        else 
            line_0_Array_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_data_V_we0 <= ap_const_logic_1;
        else 
            line_0_Array_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_last_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_last_V_ce0 <= ap_const_logic_1;
        else 
            line_0_Array_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_last_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_last_V_we0 <= ap_const_logic_1;
        else 
            line_0_Array_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_user_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_user_V_ce0 <= ap_const_logic_1;
        else 
            line_0_Array_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_0_Array_user_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_0_Array_user_V_we0 <= ap_const_logic_1;
        else 
            line_0_Array_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_data_V_ce0 <= ap_const_logic_1;
        else 
            line_1_Array_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_data_V_we0 <= ap_const_logic_1;
        else 
            line_1_Array_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_last_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_last_V_ce0 <= ap_const_logic_1;
        else 
            line_1_Array_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_last_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_last_V_we0 <= ap_const_logic_1;
        else 
            line_1_Array_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_user_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_user_V_ce0 <= ap_const_logic_1;
        else 
            line_1_Array_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_1_Array_user_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_2_reg_592, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_2_reg_592 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            line_1_Array_user_V_we0 <= ap_const_logic_1;
        else 
            line_1_Array_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n)
    begin
        if ((ap_const_logic_0 = start_full_n)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, internal_ap_ready, start_once_reg)
    begin
        if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
