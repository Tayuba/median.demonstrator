-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Color is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MdnStream_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    MdnStream_V_data_V_empty_n : IN STD_LOGIC;
    MdnStream_V_data_V_read : OUT STD_LOGIC;
    MdnStream_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    MdnStream_V_user_V_empty_n : IN STD_LOGIC;
    MdnStream_V_user_V_read : OUT STD_LOGIC;
    MdnStream_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    MdnStream_V_last_V_empty_n : IN STD_LOGIC;
    MdnStream_V_last_V_read : OUT STD_LOGIC );
end;


architecture behav of Color is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal empty_n_3_reg_87 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_reg_pp0_iter1_empty_n_3_reg_87 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_data_V_reg_91 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_fu_79_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal MdnStream_V_data_V0_update : STD_LOGIC;
    signal empty_n_nbread_fu_40_p4_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_data_V_1_vld_out))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_in))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (stream_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (stream_out_V_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (stream_out_V_data_V_1_state = ap_const_lv2_1)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out)))))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_last_V_1_vld_out))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_in))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)) or ((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_last_V_1_state) and not(((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out)))))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_user_V_1_vld_out))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_in))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_user_V_1_state)) or ((ap_const_logic_0 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_user_V_1_state)) or ((ap_const_logic_1 = stream_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_user_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_user_V_1_state) and not(((ap_const_logic_1 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_user_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_user_V_1_ack_out)))))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_empty_n_3_reg_87 <= empty_n_3_reg_87;
                empty_n_3_reg_87 <= empty_n_nbread_fu_40_p4_0;
                tmp_data_V_reg_91 <= MdnStream_V_data_V_dout;
                tmp_last_V_reg_103 <= MdnStream_V_last_V_dout;
                tmp_user_V_reg_98 <= MdnStream_V_user_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_A)) then
                stream_out_V_data_V_1_payload_A <= tmp_data_V_1_fu_79_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_B)) then
                stream_out_V_data_V_1_payload_B <= tmp_data_V_1_fu_79_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_A)) then
                stream_out_V_last_V_1_payload_A <= tmp_last_V_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_B)) then
                stream_out_V_last_V_1_payload_B <= tmp_last_V_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_A)) then
                stream_out_V_user_V_1_payload_A <= tmp_user_V_reg_98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_user_V_1_load_B)) then
                stream_out_V_user_V_1_payload_B <= tmp_user_V_reg_98;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    MdnStream_V_data_V0_update_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, MdnStream_V_data_V_empty_n, MdnStream_V_user_V_empty_n, MdnStream_V_last_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = (MdnStream_V_data_V_empty_n and MdnStream_V_user_V_empty_n and MdnStream_V_last_V_empty_n)))) then 
            MdnStream_V_data_V0_update <= ap_const_logic_1;
        else 
            MdnStream_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    MdnStream_V_data_V_read <= MdnStream_V_data_V0_update;
    MdnStream_V_last_V_read <= MdnStream_V_data_V0_update;
    MdnStream_V_user_V_read <= MdnStream_V_data_V0_update;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_start) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) or (((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, stream_out_V_data_V_1_ack_in, ap_block_state2_io, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_start) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or (((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state3_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, stream_out_V_data_V_1_ack_in, ap_block_state2_io, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = ap_start) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or (((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state3_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_io_assign_proc : process(stream_out_V_data_V_1_ack_in, empty_n_3_reg_87)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) and (empty_n_3_reg_87 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(stream_out_V_data_V_1_ack_in, ap_reg_pp0_iter1_empty_n_3_reg_87)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) and (ap_const_lv1_1 = ap_reg_pp0_iter1_empty_n_3_reg_87));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_const_logic_0 = stream_out_V_data_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_user_V_1_ack_in) or (ap_const_logic_0 = stream_out_V_last_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_n_nbread_fu_40_p4_0 <= (0=>(MdnStream_V_data_V_empty_n and MdnStream_V_user_V_empty_n and MdnStream_V_last_V_empty_n), others=>'-');
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, empty_n_3_reg_87, ap_reg_pp0_iter1_empty_n_3_reg_87, stream_out_V_data_V_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_3_reg_87 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_lv1_1 = ap_reg_pp0_iter1_empty_n_3_reg_87) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_last_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_data_V_1_sel)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_sel_wr and stream_out_V_data_V_1_state_cmp_full);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_3_reg_87, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_3_reg_87 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_last_V_1_sel)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_sel_wr and stream_out_V_last_V_1_state_cmp_full);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_3_reg_87, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_3_reg_87 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_user_V_1_sel)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_sel_wr and stream_out_V_user_V_1_state_cmp_full);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_n_3_reg_87, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_n_3_reg_87 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    tmp_data_V_1_fu_79_p4 <= ((tmp_data_V_reg_91 & tmp_data_V_reg_91) & tmp_data_V_reg_91);
end behav;
