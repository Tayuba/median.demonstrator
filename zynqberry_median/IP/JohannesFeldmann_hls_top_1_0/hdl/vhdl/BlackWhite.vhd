-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BlackWhite is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    BWStream_V_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    BWStream_V_data_V_full_n : IN STD_LOGIC;
    BWStream_V_data_V_write : OUT STD_LOGIC;
    BWStream_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    BWStream_V_user_V_full_n : IN STD_LOGIC;
    BWStream_V_user_V_write : OUT STD_LOGIC;
    BWStream_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    BWStream_V_last_V_full_n : IN STD_LOGIC;
    BWStream_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of BlackWhite is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";

    signal real_start : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal BWStream_V_data_V1_status : STD_LOGIC;
    signal empty_n_4_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_empty_n_4_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal start_once_reg : STD_LOGIC := '0';
    signal BWStream_V_data_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal BWStream_V_user_V_blk_n : STD_LOGIC;
    signal BWStream_V_last_V_blk_n : STD_LOGIC;
    signal empty_n_4_fu_77_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_empty_n_4_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_user_V_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_user_V_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_last_V_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_last_V_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_cast_i_reg_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal color_V_1_i_fu_125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal color_V_1_i_reg_175 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal BWStream_V_data_V1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal empty_n_nbread_fu_54_p4_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_93_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal color_V_cast_i_fu_103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_1_cast_i_fu_121_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_147_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_147_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_147_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_147_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component top_am_addmul_9nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    top_am_addmul_9nsbkb_U0 : component top_am_addmul_9nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        din2 => grp_fu_147_p2,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_empty_n_4_reg_156 <= empty_n_4_reg_156;
                ap_reg_pp0_iter1_tmp_last_V_reg_165 <= tmp_last_V_reg_165;
                ap_reg_pp0_iter1_tmp_user_V_reg_160 <= tmp_user_V_reg_160;
                empty_n_4_reg_156 <= empty_n_nbread_fu_54_p4_0;
                tmp_last_V_reg_165 <= stream_in_TLAST;
                tmp_user_V_reg_160 <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_empty_n_4_reg_156 <= ap_reg_pp0_iter1_empty_n_4_reg_156;
                ap_reg_pp0_iter2_tmp_last_V_reg_165 <= ap_reg_pp0_iter1_tmp_last_V_reg_165;
                ap_reg_pp0_iter2_tmp_user_V_reg_160 <= ap_reg_pp0_iter1_tmp_user_V_reg_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = empty_n_4_fu_77_p1))) then
                color_V_1_i_reg_175 <= color_V_1_i_fu_125_p2;
                phitmp_cast_i_reg_170 <= stream_in_TDATA(15 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    BWStream_V_data_V1_status <= (BWStream_V_data_V_full_n and BWStream_V_user_V_full_n and BWStream_V_last_V_full_n);

    BWStream_V_data_V1_update_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_empty_n_4_reg_156, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            BWStream_V_data_V1_update <= ap_const_logic_1;
        else 
            BWStream_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    BWStream_V_data_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_empty_n_4_reg_156, BWStream_V_data_V_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            BWStream_V_data_V_blk_n <= BWStream_V_data_V_full_n;
        else 
            BWStream_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BWStream_V_data_V_din <= grp_fu_147_p3(19 downto 12);
    BWStream_V_data_V_write <= BWStream_V_data_V1_update;

    BWStream_V_last_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_empty_n_4_reg_156, BWStream_V_last_V_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            BWStream_V_last_V_blk_n <= BWStream_V_last_V_full_n;
        else 
            BWStream_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BWStream_V_last_V_din <= ap_reg_pp0_iter2_tmp_last_V_reg_165;
    BWStream_V_last_V_write <= BWStream_V_data_V1_update;

    BWStream_V_user_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_empty_n_4_reg_156, BWStream_V_user_V_full_n, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            BWStream_V_user_V_blk_n <= BWStream_V_user_V_full_n;
        else 
            BWStream_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BWStream_V_user_V_din <= ap_reg_pp0_iter2_tmp_user_V_reg_160;
    BWStream_V_user_V_write <= BWStream_V_data_V1_update;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter3, BWStream_V_data_V1_status, ap_reg_pp0_iter2_empty_n_4_reg_156)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = BWStream_V_data_V1_status) and (ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter3, BWStream_V_data_V1_status, ap_reg_pp0_iter2_empty_n_4_reg_156)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = BWStream_V_data_V1_status) and (ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter3, BWStream_V_data_V1_status, ap_reg_pp0_iter2_empty_n_4_reg_156)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_0 = BWStream_V_data_V1_status) and (ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(BWStream_V_data_V1_status, ap_reg_pp0_iter2_empty_n_4_reg_156)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ap_const_logic_0 = BWStream_V_data_V1_status) and (ap_reg_pp0_iter2_empty_n_4_reg_156 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to2)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_idle_pp0_0to2))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    color_V_1_i_fu_125_p2 <= std_logic_vector(unsigned(color_V_cast_i_fu_103_p1) + unsigned(p_1_cast_i_fu_121_p1));
    color_V_cast_i_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_93_p4),9));
    empty_n_4_fu_77_p1 <= empty_n_nbread_fu_54_p4_0;
    empty_n_nbread_fu_54_p4_0 <= (0=>(stream_in_TVALID), others=>'-');

    grp_fu_147_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_147_ce <= ap_const_logic_1;
        else 
            grp_fu_147_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_147_p0 <= grp_fu_147_p00(9 - 1 downto 0);
    grp_fu_147_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(color_V_1_i_reg_175),10));
    grp_fu_147_p1 <= grp_fu_147_p10(8 - 1 downto 0);
    grp_fu_147_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp_cast_i_reg_170),10));
    grp_fu_147_p2 <= ap_const_lv22_556(12 - 1 downto 0);

    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = real_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_1_cast_i_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_117_p1),9));

    real_start_assign_proc : process(ap_start, start_full_n)
    begin
        if ((ap_const_logic_0 = start_full_n)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, internal_ap_ready, start_once_reg)
    begin
        if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = real_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_117_p1 <= stream_in_TDATA(8 - 1 downto 0);
    tmp_fu_93_p4 <= stream_in_TDATA(23 downto 16);
end behav;
