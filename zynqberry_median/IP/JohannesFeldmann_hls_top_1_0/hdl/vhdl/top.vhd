-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    stream_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.983000,HLS_SYN_LAT=22,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=1764,HLS_SYN_LUT=2297}";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal BlackWhite_U0_ap_start : STD_LOGIC;
    signal BlackWhite_U0_start_full_n : STD_LOGIC;
    signal BlackWhite_U0_ap_done : STD_LOGIC;
    signal BlackWhite_U0_ap_continue : STD_LOGIC;
    signal BlackWhite_U0_ap_idle : STD_LOGIC;
    signal BlackWhite_U0_ap_ready : STD_LOGIC;
    signal BlackWhite_U0_start_out : STD_LOGIC;
    signal BlackWhite_U0_start_write : STD_LOGIC;
    signal BlackWhite_U0_stream_in_TREADY : STD_LOGIC;
    signal BlackWhite_U0_BWStream_V_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal BlackWhite_U0_BWStream_V_data_V_write : STD_LOGIC;
    signal BlackWhite_U0_BWStream_V_user_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal BlackWhite_U0_BWStream_V_user_V_write : STD_LOGIC;
    signal BlackWhite_U0_BWStream_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal BlackWhite_U0_BWStream_V_last_V_write : STD_LOGIC;
    signal Matrix_U0_ap_start : STD_LOGIC;
    signal Matrix_U0_start_full_n : STD_LOGIC;
    signal Matrix_U0_ap_done : STD_LOGIC;
    signal Matrix_U0_ap_continue : STD_LOGIC;
    signal Matrix_U0_ap_idle : STD_LOGIC;
    signal Matrix_U0_ap_ready : STD_LOGIC;
    signal Matrix_U0_start_out : STD_LOGIC;
    signal Matrix_U0_start_write : STD_LOGIC;
    signal Matrix_U0_BWStream_V_data_V_read : STD_LOGIC;
    signal Matrix_U0_BWStream_V_user_V_read : STD_LOGIC;
    signal Matrix_U0_BWStream_V_last_V_read : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_8_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_8_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_7_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_7_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_6_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_6_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_5_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_5_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_4_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_4_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_3_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_3_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_2_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_1_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_da_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_da_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_8_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_8_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_7_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_7_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_6_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_6_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_5_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_5_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_4_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_4_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_3_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_3_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_2_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_2_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_1_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_us_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_us_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_8_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_8_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_7_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_7_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_6_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_6_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_5_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_5_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_4_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_4_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_3_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_3_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_2_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_2_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_1_write : STD_LOGIC;
    signal Matrix_U0_PxlStream_V_pixel_la_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Matrix_U0_PxlStream_V_pixel_la_write : STD_LOGIC;
    signal Median_U0_ap_start : STD_LOGIC;
    signal Median_U0_start_full_n : STD_LOGIC;
    signal Median_U0_ap_done : STD_LOGIC;
    signal Median_U0_ap_continue : STD_LOGIC;
    signal Median_U0_ap_idle : STD_LOGIC;
    signal Median_U0_ap_ready : STD_LOGIC;
    signal Median_U0_start_out : STD_LOGIC;
    signal Median_U0_start_write : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_8_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_7_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_6_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_5_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_4_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_3_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_2_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_1_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_da_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_8_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_7_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_6_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_5_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_4_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_3_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_2_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_1_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_us_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_8_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_7_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_6_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_5_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_4_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_3_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_2_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_1_read : STD_LOGIC;
    signal Median_U0_PxlStream_V_pixel_la_read : STD_LOGIC;
    signal Median_U0_MdnStream_V_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Median_U0_MdnStream_V_data_V_write : STD_LOGIC;
    signal Median_U0_MdnStream_V_user_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Median_U0_MdnStream_V_user_V_write : STD_LOGIC;
    signal Median_U0_MdnStream_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Median_U0_MdnStream_V_last_V_write : STD_LOGIC;
    signal Color_U0_ap_start : STD_LOGIC;
    signal Color_U0_ap_done : STD_LOGIC;
    signal Color_U0_ap_continue : STD_LOGIC;
    signal Color_U0_ap_idle : STD_LOGIC;
    signal Color_U0_ap_ready : STD_LOGIC;
    signal Color_U0_stream_out_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Color_U0_stream_out_TVALID : STD_LOGIC;
    signal Color_U0_stream_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Color_U0_stream_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Color_U0_MdnStream_V_data_V_read : STD_LOGIC;
    signal Color_U0_MdnStream_V_user_V_read : STD_LOGIC;
    signal Color_U0_MdnStream_V_last_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal BWStream_V_data_V_full_n : STD_LOGIC;
    signal BWStream_V_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal BWStream_V_data_V_empty_n : STD_LOGIC;
    signal BWStream_V_user_V_full_n : STD_LOGIC;
    signal BWStream_V_user_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal BWStream_V_user_V_empty_n : STD_LOGIC;
    signal BWStream_V_last_V_full_n : STD_LOGIC;
    signal BWStream_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal BWStream_V_last_V_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_8_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_8_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_8_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_7_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_7_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_7_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_6_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_6_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_6_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_5_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_5_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_5_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_4_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_4_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_4_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_3_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_3_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_2_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_2_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_1_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_1_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_da_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal PxlStream_V_pixel_da_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_8_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_8_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_8_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_7_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_7_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_7_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_6_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_6_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_6_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_5_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_5_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_5_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_4_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_4_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_4_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_3_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_3_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_3_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_2_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_2_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_1_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_1_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_us_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_us_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_8_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_8_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_8_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_7_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_7_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_7_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_6_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_6_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_6_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_5_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_5_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_5_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_4_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_4_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_4_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_3_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_3_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_3_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_2_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_2_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_1_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_1_empty_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_full_n : STD_LOGIC;
    signal PxlStream_V_pixel_la_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal PxlStream_V_pixel_la_empty_n : STD_LOGIC;
    signal MdnStream_V_data_V_full_n : STD_LOGIC;
    signal MdnStream_V_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal MdnStream_V_data_V_empty_n : STD_LOGIC;
    signal MdnStream_V_user_V_full_n : STD_LOGIC;
    signal MdnStream_V_user_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal MdnStream_V_user_V_empty_n : STD_LOGIC;
    signal MdnStream_V_last_V_full_n : STD_LOGIC;
    signal MdnStream_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal MdnStream_V_last_V_empty_n : STD_LOGIC;
    signal start_for_Matrix_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Matrix_U0_full_n : STD_LOGIC;
    signal start_for_Matrix_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Matrix_U0_empty_n : STD_LOGIC;
    signal start_for_Median_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Median_U0_full_n : STD_LOGIC;
    signal start_for_Median_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Median_U0_empty_n : STD_LOGIC;
    signal start_for_Color_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Color_U0_full_n : STD_LOGIC;
    signal start_for_Color_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Color_U0_empty_n : STD_LOGIC;
    signal Color_U0_start_full_n : STD_LOGIC;
    signal Color_U0_start_write : STD_LOGIC;

    component BlackWhite IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_in_TVALID : IN STD_LOGIC;
        stream_in_TREADY : OUT STD_LOGIC;
        stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        BWStream_V_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        BWStream_V_data_V_full_n : IN STD_LOGIC;
        BWStream_V_data_V_write : OUT STD_LOGIC;
        BWStream_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        BWStream_V_user_V_full_n : IN STD_LOGIC;
        BWStream_V_user_V_write : OUT STD_LOGIC;
        BWStream_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        BWStream_V_last_V_full_n : IN STD_LOGIC;
        BWStream_V_last_V_write : OUT STD_LOGIC );
    end component;


    component Matrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        BWStream_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        BWStream_V_data_V_empty_n : IN STD_LOGIC;
        BWStream_V_data_V_read : OUT STD_LOGIC;
        BWStream_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        BWStream_V_user_V_empty_n : IN STD_LOGIC;
        BWStream_V_user_V_read : OUT STD_LOGIC;
        BWStream_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        BWStream_V_last_V_empty_n : IN STD_LOGIC;
        BWStream_V_last_V_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_8_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_8_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_8_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_7_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_7_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_6_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_6_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_5_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_5_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_4_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_4_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_3_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_3_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_2_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_2_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_1_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_1_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_8_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_8_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_7_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_7_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_6_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_6_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_6_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_5_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_5_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_5_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_4_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_4_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_4_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_3_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_3_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_2_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_2_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_1_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_1_write : OUT STD_LOGIC;
        PxlStream_V_pixel_us_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_8_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_8_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_7_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_7_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_6_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_6_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_6_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_5_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_5_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_5_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_4_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_4_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_4_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_3_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_3_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_2_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_2_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_1_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_1_write : OUT STD_LOGIC;
        PxlStream_V_pixel_la_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_full_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_write : OUT STD_LOGIC );
    end component;


    component Median IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        PxlStream_V_pixel_da_8_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_8_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_8_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_7_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_7_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_7_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_6_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_6_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_5_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_5_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_4_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_4_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_3_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_3_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_2_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_2_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_1_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_1_read : OUT STD_LOGIC;
        PxlStream_V_pixel_da_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        PxlStream_V_pixel_da_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_da_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_8_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_8_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_8_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_7_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_7_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_7_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_6_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_6_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_6_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_5_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_5_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_5_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_4_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_4_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_4_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_3_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_3_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_2_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_2_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_1_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_1_read : OUT STD_LOGIC;
        PxlStream_V_pixel_us_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_us_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_us_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_8_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_8_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_8_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_7_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_7_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_7_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_6_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_6_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_6_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_5_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_5_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_5_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_4_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_4_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_4_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_3_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_3_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_2_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_2_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_1_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_1_read : OUT STD_LOGIC;
        PxlStream_V_pixel_la_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        PxlStream_V_pixel_la_empty_n : IN STD_LOGIC;
        PxlStream_V_pixel_la_read : OUT STD_LOGIC;
        MdnStream_V_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        MdnStream_V_data_V_full_n : IN STD_LOGIC;
        MdnStream_V_data_V_write : OUT STD_LOGIC;
        MdnStream_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        MdnStream_V_user_V_full_n : IN STD_LOGIC;
        MdnStream_V_user_V_write : OUT STD_LOGIC;
        MdnStream_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        MdnStream_V_last_V_full_n : IN STD_LOGIC;
        MdnStream_V_last_V_write : OUT STD_LOGIC );
    end component;


    component Color IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_out_TREADY : IN STD_LOGIC;
        stream_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_out_TVALID : OUT STD_LOGIC;
        stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        MdnStream_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        MdnStream_V_data_V_empty_n : IN STD_LOGIC;
        MdnStream_V_data_V_read : OUT STD_LOGIC;
        MdnStream_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        MdnStream_V_user_V_empty_n : IN STD_LOGIC;
        MdnStream_V_user_V_read : OUT STD_LOGIC;
        MdnStream_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        MdnStream_V_last_V_empty_n : IN STD_LOGIC;
        MdnStream_V_last_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w8_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Matrix_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Median_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Color_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    BlackWhite_U0 : component BlackWhite
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => BlackWhite_U0_ap_start,
        start_full_n => BlackWhite_U0_start_full_n,
        ap_done => BlackWhite_U0_ap_done,
        ap_continue => BlackWhite_U0_ap_continue,
        ap_idle => BlackWhite_U0_ap_idle,
        ap_ready => BlackWhite_U0_ap_ready,
        start_out => BlackWhite_U0_start_out,
        start_write => BlackWhite_U0_start_write,
        stream_in_TDATA => stream_in_TDATA,
        stream_in_TVALID => stream_in_TVALID,
        stream_in_TREADY => BlackWhite_U0_stream_in_TREADY,
        stream_in_TUSER => stream_in_TUSER,
        stream_in_TLAST => stream_in_TLAST,
        BWStream_V_data_V_din => BlackWhite_U0_BWStream_V_data_V_din,
        BWStream_V_data_V_full_n => BWStream_V_data_V_full_n,
        BWStream_V_data_V_write => BlackWhite_U0_BWStream_V_data_V_write,
        BWStream_V_user_V_din => BlackWhite_U0_BWStream_V_user_V_din,
        BWStream_V_user_V_full_n => BWStream_V_user_V_full_n,
        BWStream_V_user_V_write => BlackWhite_U0_BWStream_V_user_V_write,
        BWStream_V_last_V_din => BlackWhite_U0_BWStream_V_last_V_din,
        BWStream_V_last_V_full_n => BWStream_V_last_V_full_n,
        BWStream_V_last_V_write => BlackWhite_U0_BWStream_V_last_V_write);

    Matrix_U0 : component Matrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Matrix_U0_ap_start,
        start_full_n => Matrix_U0_start_full_n,
        ap_done => Matrix_U0_ap_done,
        ap_continue => Matrix_U0_ap_continue,
        ap_idle => Matrix_U0_ap_idle,
        ap_ready => Matrix_U0_ap_ready,
        start_out => Matrix_U0_start_out,
        start_write => Matrix_U0_start_write,
        BWStream_V_data_V_dout => BWStream_V_data_V_dout,
        BWStream_V_data_V_empty_n => BWStream_V_data_V_empty_n,
        BWStream_V_data_V_read => Matrix_U0_BWStream_V_data_V_read,
        BWStream_V_user_V_dout => BWStream_V_user_V_dout,
        BWStream_V_user_V_empty_n => BWStream_V_user_V_empty_n,
        BWStream_V_user_V_read => Matrix_U0_BWStream_V_user_V_read,
        BWStream_V_last_V_dout => BWStream_V_last_V_dout,
        BWStream_V_last_V_empty_n => BWStream_V_last_V_empty_n,
        BWStream_V_last_V_read => Matrix_U0_BWStream_V_last_V_read,
        PxlStream_V_pixel_da_8_din => Matrix_U0_PxlStream_V_pixel_da_8_din,
        PxlStream_V_pixel_da_8_full_n => PxlStream_V_pixel_da_8_full_n,
        PxlStream_V_pixel_da_8_write => Matrix_U0_PxlStream_V_pixel_da_8_write,
        PxlStream_V_pixel_da_7_din => Matrix_U0_PxlStream_V_pixel_da_7_din,
        PxlStream_V_pixel_da_7_full_n => PxlStream_V_pixel_da_7_full_n,
        PxlStream_V_pixel_da_7_write => Matrix_U0_PxlStream_V_pixel_da_7_write,
        PxlStream_V_pixel_da_6_din => Matrix_U0_PxlStream_V_pixel_da_6_din,
        PxlStream_V_pixel_da_6_full_n => PxlStream_V_pixel_da_6_full_n,
        PxlStream_V_pixel_da_6_write => Matrix_U0_PxlStream_V_pixel_da_6_write,
        PxlStream_V_pixel_da_5_din => Matrix_U0_PxlStream_V_pixel_da_5_din,
        PxlStream_V_pixel_da_5_full_n => PxlStream_V_pixel_da_5_full_n,
        PxlStream_V_pixel_da_5_write => Matrix_U0_PxlStream_V_pixel_da_5_write,
        PxlStream_V_pixel_da_4_din => Matrix_U0_PxlStream_V_pixel_da_4_din,
        PxlStream_V_pixel_da_4_full_n => PxlStream_V_pixel_da_4_full_n,
        PxlStream_V_pixel_da_4_write => Matrix_U0_PxlStream_V_pixel_da_4_write,
        PxlStream_V_pixel_da_3_din => Matrix_U0_PxlStream_V_pixel_da_3_din,
        PxlStream_V_pixel_da_3_full_n => PxlStream_V_pixel_da_3_full_n,
        PxlStream_V_pixel_da_3_write => Matrix_U0_PxlStream_V_pixel_da_3_write,
        PxlStream_V_pixel_da_2_din => Matrix_U0_PxlStream_V_pixel_da_2_din,
        PxlStream_V_pixel_da_2_full_n => PxlStream_V_pixel_da_2_full_n,
        PxlStream_V_pixel_da_2_write => Matrix_U0_PxlStream_V_pixel_da_2_write,
        PxlStream_V_pixel_da_1_din => Matrix_U0_PxlStream_V_pixel_da_1_din,
        PxlStream_V_pixel_da_1_full_n => PxlStream_V_pixel_da_1_full_n,
        PxlStream_V_pixel_da_1_write => Matrix_U0_PxlStream_V_pixel_da_1_write,
        PxlStream_V_pixel_da_din => Matrix_U0_PxlStream_V_pixel_da_din,
        PxlStream_V_pixel_da_full_n => PxlStream_V_pixel_da_full_n,
        PxlStream_V_pixel_da_write => Matrix_U0_PxlStream_V_pixel_da_write,
        PxlStream_V_pixel_us_8_din => Matrix_U0_PxlStream_V_pixel_us_8_din,
        PxlStream_V_pixel_us_8_full_n => PxlStream_V_pixel_us_8_full_n,
        PxlStream_V_pixel_us_8_write => Matrix_U0_PxlStream_V_pixel_us_8_write,
        PxlStream_V_pixel_us_7_din => Matrix_U0_PxlStream_V_pixel_us_7_din,
        PxlStream_V_pixel_us_7_full_n => PxlStream_V_pixel_us_7_full_n,
        PxlStream_V_pixel_us_7_write => Matrix_U0_PxlStream_V_pixel_us_7_write,
        PxlStream_V_pixel_us_6_din => Matrix_U0_PxlStream_V_pixel_us_6_din,
        PxlStream_V_pixel_us_6_full_n => PxlStream_V_pixel_us_6_full_n,
        PxlStream_V_pixel_us_6_write => Matrix_U0_PxlStream_V_pixel_us_6_write,
        PxlStream_V_pixel_us_5_din => Matrix_U0_PxlStream_V_pixel_us_5_din,
        PxlStream_V_pixel_us_5_full_n => PxlStream_V_pixel_us_5_full_n,
        PxlStream_V_pixel_us_5_write => Matrix_U0_PxlStream_V_pixel_us_5_write,
        PxlStream_V_pixel_us_4_din => Matrix_U0_PxlStream_V_pixel_us_4_din,
        PxlStream_V_pixel_us_4_full_n => PxlStream_V_pixel_us_4_full_n,
        PxlStream_V_pixel_us_4_write => Matrix_U0_PxlStream_V_pixel_us_4_write,
        PxlStream_V_pixel_us_3_din => Matrix_U0_PxlStream_V_pixel_us_3_din,
        PxlStream_V_pixel_us_3_full_n => PxlStream_V_pixel_us_3_full_n,
        PxlStream_V_pixel_us_3_write => Matrix_U0_PxlStream_V_pixel_us_3_write,
        PxlStream_V_pixel_us_2_din => Matrix_U0_PxlStream_V_pixel_us_2_din,
        PxlStream_V_pixel_us_2_full_n => PxlStream_V_pixel_us_2_full_n,
        PxlStream_V_pixel_us_2_write => Matrix_U0_PxlStream_V_pixel_us_2_write,
        PxlStream_V_pixel_us_1_din => Matrix_U0_PxlStream_V_pixel_us_1_din,
        PxlStream_V_pixel_us_1_full_n => PxlStream_V_pixel_us_1_full_n,
        PxlStream_V_pixel_us_1_write => Matrix_U0_PxlStream_V_pixel_us_1_write,
        PxlStream_V_pixel_us_din => Matrix_U0_PxlStream_V_pixel_us_din,
        PxlStream_V_pixel_us_full_n => PxlStream_V_pixel_us_full_n,
        PxlStream_V_pixel_us_write => Matrix_U0_PxlStream_V_pixel_us_write,
        PxlStream_V_pixel_la_8_din => Matrix_U0_PxlStream_V_pixel_la_8_din,
        PxlStream_V_pixel_la_8_full_n => PxlStream_V_pixel_la_8_full_n,
        PxlStream_V_pixel_la_8_write => Matrix_U0_PxlStream_V_pixel_la_8_write,
        PxlStream_V_pixel_la_7_din => Matrix_U0_PxlStream_V_pixel_la_7_din,
        PxlStream_V_pixel_la_7_full_n => PxlStream_V_pixel_la_7_full_n,
        PxlStream_V_pixel_la_7_write => Matrix_U0_PxlStream_V_pixel_la_7_write,
        PxlStream_V_pixel_la_6_din => Matrix_U0_PxlStream_V_pixel_la_6_din,
        PxlStream_V_pixel_la_6_full_n => PxlStream_V_pixel_la_6_full_n,
        PxlStream_V_pixel_la_6_write => Matrix_U0_PxlStream_V_pixel_la_6_write,
        PxlStream_V_pixel_la_5_din => Matrix_U0_PxlStream_V_pixel_la_5_din,
        PxlStream_V_pixel_la_5_full_n => PxlStream_V_pixel_la_5_full_n,
        PxlStream_V_pixel_la_5_write => Matrix_U0_PxlStream_V_pixel_la_5_write,
        PxlStream_V_pixel_la_4_din => Matrix_U0_PxlStream_V_pixel_la_4_din,
        PxlStream_V_pixel_la_4_full_n => PxlStream_V_pixel_la_4_full_n,
        PxlStream_V_pixel_la_4_write => Matrix_U0_PxlStream_V_pixel_la_4_write,
        PxlStream_V_pixel_la_3_din => Matrix_U0_PxlStream_V_pixel_la_3_din,
        PxlStream_V_pixel_la_3_full_n => PxlStream_V_pixel_la_3_full_n,
        PxlStream_V_pixel_la_3_write => Matrix_U0_PxlStream_V_pixel_la_3_write,
        PxlStream_V_pixel_la_2_din => Matrix_U0_PxlStream_V_pixel_la_2_din,
        PxlStream_V_pixel_la_2_full_n => PxlStream_V_pixel_la_2_full_n,
        PxlStream_V_pixel_la_2_write => Matrix_U0_PxlStream_V_pixel_la_2_write,
        PxlStream_V_pixel_la_1_din => Matrix_U0_PxlStream_V_pixel_la_1_din,
        PxlStream_V_pixel_la_1_full_n => PxlStream_V_pixel_la_1_full_n,
        PxlStream_V_pixel_la_1_write => Matrix_U0_PxlStream_V_pixel_la_1_write,
        PxlStream_V_pixel_la_din => Matrix_U0_PxlStream_V_pixel_la_din,
        PxlStream_V_pixel_la_full_n => PxlStream_V_pixel_la_full_n,
        PxlStream_V_pixel_la_write => Matrix_U0_PxlStream_V_pixel_la_write);

    Median_U0 : component Median
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Median_U0_ap_start,
        start_full_n => Median_U0_start_full_n,
        ap_done => Median_U0_ap_done,
        ap_continue => Median_U0_ap_continue,
        ap_idle => Median_U0_ap_idle,
        ap_ready => Median_U0_ap_ready,
        start_out => Median_U0_start_out,
        start_write => Median_U0_start_write,
        PxlStream_V_pixel_da_8_dout => PxlStream_V_pixel_da_8_dout,
        PxlStream_V_pixel_da_8_empty_n => PxlStream_V_pixel_da_8_empty_n,
        PxlStream_V_pixel_da_8_read => Median_U0_PxlStream_V_pixel_da_8_read,
        PxlStream_V_pixel_da_7_dout => PxlStream_V_pixel_da_7_dout,
        PxlStream_V_pixel_da_7_empty_n => PxlStream_V_pixel_da_7_empty_n,
        PxlStream_V_pixel_da_7_read => Median_U0_PxlStream_V_pixel_da_7_read,
        PxlStream_V_pixel_da_6_dout => PxlStream_V_pixel_da_6_dout,
        PxlStream_V_pixel_da_6_empty_n => PxlStream_V_pixel_da_6_empty_n,
        PxlStream_V_pixel_da_6_read => Median_U0_PxlStream_V_pixel_da_6_read,
        PxlStream_V_pixel_da_5_dout => PxlStream_V_pixel_da_5_dout,
        PxlStream_V_pixel_da_5_empty_n => PxlStream_V_pixel_da_5_empty_n,
        PxlStream_V_pixel_da_5_read => Median_U0_PxlStream_V_pixel_da_5_read,
        PxlStream_V_pixel_da_4_dout => PxlStream_V_pixel_da_4_dout,
        PxlStream_V_pixel_da_4_empty_n => PxlStream_V_pixel_da_4_empty_n,
        PxlStream_V_pixel_da_4_read => Median_U0_PxlStream_V_pixel_da_4_read,
        PxlStream_V_pixel_da_3_dout => PxlStream_V_pixel_da_3_dout,
        PxlStream_V_pixel_da_3_empty_n => PxlStream_V_pixel_da_3_empty_n,
        PxlStream_V_pixel_da_3_read => Median_U0_PxlStream_V_pixel_da_3_read,
        PxlStream_V_pixel_da_2_dout => PxlStream_V_pixel_da_2_dout,
        PxlStream_V_pixel_da_2_empty_n => PxlStream_V_pixel_da_2_empty_n,
        PxlStream_V_pixel_da_2_read => Median_U0_PxlStream_V_pixel_da_2_read,
        PxlStream_V_pixel_da_1_dout => PxlStream_V_pixel_da_1_dout,
        PxlStream_V_pixel_da_1_empty_n => PxlStream_V_pixel_da_1_empty_n,
        PxlStream_V_pixel_da_1_read => Median_U0_PxlStream_V_pixel_da_1_read,
        PxlStream_V_pixel_da_dout => PxlStream_V_pixel_da_dout,
        PxlStream_V_pixel_da_empty_n => PxlStream_V_pixel_da_empty_n,
        PxlStream_V_pixel_da_read => Median_U0_PxlStream_V_pixel_da_read,
        PxlStream_V_pixel_us_8_dout => PxlStream_V_pixel_us_8_dout,
        PxlStream_V_pixel_us_8_empty_n => PxlStream_V_pixel_us_8_empty_n,
        PxlStream_V_pixel_us_8_read => Median_U0_PxlStream_V_pixel_us_8_read,
        PxlStream_V_pixel_us_7_dout => PxlStream_V_pixel_us_7_dout,
        PxlStream_V_pixel_us_7_empty_n => PxlStream_V_pixel_us_7_empty_n,
        PxlStream_V_pixel_us_7_read => Median_U0_PxlStream_V_pixel_us_7_read,
        PxlStream_V_pixel_us_6_dout => PxlStream_V_pixel_us_6_dout,
        PxlStream_V_pixel_us_6_empty_n => PxlStream_V_pixel_us_6_empty_n,
        PxlStream_V_pixel_us_6_read => Median_U0_PxlStream_V_pixel_us_6_read,
        PxlStream_V_pixel_us_5_dout => PxlStream_V_pixel_us_5_dout,
        PxlStream_V_pixel_us_5_empty_n => PxlStream_V_pixel_us_5_empty_n,
        PxlStream_V_pixel_us_5_read => Median_U0_PxlStream_V_pixel_us_5_read,
        PxlStream_V_pixel_us_4_dout => PxlStream_V_pixel_us_4_dout,
        PxlStream_V_pixel_us_4_empty_n => PxlStream_V_pixel_us_4_empty_n,
        PxlStream_V_pixel_us_4_read => Median_U0_PxlStream_V_pixel_us_4_read,
        PxlStream_V_pixel_us_3_dout => PxlStream_V_pixel_us_3_dout,
        PxlStream_V_pixel_us_3_empty_n => PxlStream_V_pixel_us_3_empty_n,
        PxlStream_V_pixel_us_3_read => Median_U0_PxlStream_V_pixel_us_3_read,
        PxlStream_V_pixel_us_2_dout => PxlStream_V_pixel_us_2_dout,
        PxlStream_V_pixel_us_2_empty_n => PxlStream_V_pixel_us_2_empty_n,
        PxlStream_V_pixel_us_2_read => Median_U0_PxlStream_V_pixel_us_2_read,
        PxlStream_V_pixel_us_1_dout => PxlStream_V_pixel_us_1_dout,
        PxlStream_V_pixel_us_1_empty_n => PxlStream_V_pixel_us_1_empty_n,
        PxlStream_V_pixel_us_1_read => Median_U0_PxlStream_V_pixel_us_1_read,
        PxlStream_V_pixel_us_dout => PxlStream_V_pixel_us_dout,
        PxlStream_V_pixel_us_empty_n => PxlStream_V_pixel_us_empty_n,
        PxlStream_V_pixel_us_read => Median_U0_PxlStream_V_pixel_us_read,
        PxlStream_V_pixel_la_8_dout => PxlStream_V_pixel_la_8_dout,
        PxlStream_V_pixel_la_8_empty_n => PxlStream_V_pixel_la_8_empty_n,
        PxlStream_V_pixel_la_8_read => Median_U0_PxlStream_V_pixel_la_8_read,
        PxlStream_V_pixel_la_7_dout => PxlStream_V_pixel_la_7_dout,
        PxlStream_V_pixel_la_7_empty_n => PxlStream_V_pixel_la_7_empty_n,
        PxlStream_V_pixel_la_7_read => Median_U0_PxlStream_V_pixel_la_7_read,
        PxlStream_V_pixel_la_6_dout => PxlStream_V_pixel_la_6_dout,
        PxlStream_V_pixel_la_6_empty_n => PxlStream_V_pixel_la_6_empty_n,
        PxlStream_V_pixel_la_6_read => Median_U0_PxlStream_V_pixel_la_6_read,
        PxlStream_V_pixel_la_5_dout => PxlStream_V_pixel_la_5_dout,
        PxlStream_V_pixel_la_5_empty_n => PxlStream_V_pixel_la_5_empty_n,
        PxlStream_V_pixel_la_5_read => Median_U0_PxlStream_V_pixel_la_5_read,
        PxlStream_V_pixel_la_4_dout => PxlStream_V_pixel_la_4_dout,
        PxlStream_V_pixel_la_4_empty_n => PxlStream_V_pixel_la_4_empty_n,
        PxlStream_V_pixel_la_4_read => Median_U0_PxlStream_V_pixel_la_4_read,
        PxlStream_V_pixel_la_3_dout => PxlStream_V_pixel_la_3_dout,
        PxlStream_V_pixel_la_3_empty_n => PxlStream_V_pixel_la_3_empty_n,
        PxlStream_V_pixel_la_3_read => Median_U0_PxlStream_V_pixel_la_3_read,
        PxlStream_V_pixel_la_2_dout => PxlStream_V_pixel_la_2_dout,
        PxlStream_V_pixel_la_2_empty_n => PxlStream_V_pixel_la_2_empty_n,
        PxlStream_V_pixel_la_2_read => Median_U0_PxlStream_V_pixel_la_2_read,
        PxlStream_V_pixel_la_1_dout => PxlStream_V_pixel_la_1_dout,
        PxlStream_V_pixel_la_1_empty_n => PxlStream_V_pixel_la_1_empty_n,
        PxlStream_V_pixel_la_1_read => Median_U0_PxlStream_V_pixel_la_1_read,
        PxlStream_V_pixel_la_dout => PxlStream_V_pixel_la_dout,
        PxlStream_V_pixel_la_empty_n => PxlStream_V_pixel_la_empty_n,
        PxlStream_V_pixel_la_read => Median_U0_PxlStream_V_pixel_la_read,
        MdnStream_V_data_V_din => Median_U0_MdnStream_V_data_V_din,
        MdnStream_V_data_V_full_n => MdnStream_V_data_V_full_n,
        MdnStream_V_data_V_write => Median_U0_MdnStream_V_data_V_write,
        MdnStream_V_user_V_din => Median_U0_MdnStream_V_user_V_din,
        MdnStream_V_user_V_full_n => MdnStream_V_user_V_full_n,
        MdnStream_V_user_V_write => Median_U0_MdnStream_V_user_V_write,
        MdnStream_V_last_V_din => Median_U0_MdnStream_V_last_V_din,
        MdnStream_V_last_V_full_n => MdnStream_V_last_V_full_n,
        MdnStream_V_last_V_write => Median_U0_MdnStream_V_last_V_write);

    Color_U0 : component Color
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Color_U0_ap_start,
        ap_done => Color_U0_ap_done,
        ap_continue => Color_U0_ap_continue,
        ap_idle => Color_U0_ap_idle,
        ap_ready => Color_U0_ap_ready,
        stream_out_TREADY => stream_out_TREADY,
        stream_out_TDATA => Color_U0_stream_out_TDATA,
        stream_out_TVALID => Color_U0_stream_out_TVALID,
        stream_out_TUSER => Color_U0_stream_out_TUSER,
        stream_out_TLAST => Color_U0_stream_out_TLAST,
        MdnStream_V_data_V_dout => MdnStream_V_data_V_dout,
        MdnStream_V_data_V_empty_n => MdnStream_V_data_V_empty_n,
        MdnStream_V_data_V_read => Color_U0_MdnStream_V_data_V_read,
        MdnStream_V_user_V_dout => MdnStream_V_user_V_dout,
        MdnStream_V_user_V_empty_n => MdnStream_V_user_V_empty_n,
        MdnStream_V_user_V_read => Color_U0_MdnStream_V_user_V_read,
        MdnStream_V_last_V_dout => MdnStream_V_last_V_dout,
        MdnStream_V_last_V_empty_n => MdnStream_V_last_V_empty_n,
        MdnStream_V_last_V_read => Color_U0_MdnStream_V_last_V_read);

    BWStream_V_data_V_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => BlackWhite_U0_BWStream_V_data_V_din,
        if_full_n => BWStream_V_data_V_full_n,
        if_write => BlackWhite_U0_BWStream_V_data_V_write,
        if_dout => BWStream_V_data_V_dout,
        if_empty_n => BWStream_V_data_V_empty_n,
        if_read => Matrix_U0_BWStream_V_data_V_read);

    BWStream_V_user_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => BlackWhite_U0_BWStream_V_user_V_din,
        if_full_n => BWStream_V_user_V_full_n,
        if_write => BlackWhite_U0_BWStream_V_user_V_write,
        if_dout => BWStream_V_user_V_dout,
        if_empty_n => BWStream_V_user_V_empty_n,
        if_read => Matrix_U0_BWStream_V_user_V_read);

    BWStream_V_last_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => BlackWhite_U0_BWStream_V_last_V_din,
        if_full_n => BWStream_V_last_V_full_n,
        if_write => BlackWhite_U0_BWStream_V_last_V_write,
        if_dout => BWStream_V_last_V_dout,
        if_empty_n => BWStream_V_last_V_empty_n,
        if_read => Matrix_U0_BWStream_V_last_V_read);

    PxlStream_V_pixel_da_8_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_8_din,
        if_full_n => PxlStream_V_pixel_da_8_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_8_write,
        if_dout => PxlStream_V_pixel_da_8_dout,
        if_empty_n => PxlStream_V_pixel_da_8_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_8_read);

    PxlStream_V_pixel_da_7_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_7_din,
        if_full_n => PxlStream_V_pixel_da_7_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_7_write,
        if_dout => PxlStream_V_pixel_da_7_dout,
        if_empty_n => PxlStream_V_pixel_da_7_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_7_read);

    PxlStream_V_pixel_da_6_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_6_din,
        if_full_n => PxlStream_V_pixel_da_6_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_6_write,
        if_dout => PxlStream_V_pixel_da_6_dout,
        if_empty_n => PxlStream_V_pixel_da_6_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_6_read);

    PxlStream_V_pixel_da_5_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_5_din,
        if_full_n => PxlStream_V_pixel_da_5_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_5_write,
        if_dout => PxlStream_V_pixel_da_5_dout,
        if_empty_n => PxlStream_V_pixel_da_5_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_5_read);

    PxlStream_V_pixel_da_4_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_4_din,
        if_full_n => PxlStream_V_pixel_da_4_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_4_write,
        if_dout => PxlStream_V_pixel_da_4_dout,
        if_empty_n => PxlStream_V_pixel_da_4_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_4_read);

    PxlStream_V_pixel_da_3_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_3_din,
        if_full_n => PxlStream_V_pixel_da_3_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_3_write,
        if_dout => PxlStream_V_pixel_da_3_dout,
        if_empty_n => PxlStream_V_pixel_da_3_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_3_read);

    PxlStream_V_pixel_da_2_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_2_din,
        if_full_n => PxlStream_V_pixel_da_2_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_2_write,
        if_dout => PxlStream_V_pixel_da_2_dout,
        if_empty_n => PxlStream_V_pixel_da_2_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_2_read);

    PxlStream_V_pixel_da_1_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_1_din,
        if_full_n => PxlStream_V_pixel_da_1_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_1_write,
        if_dout => PxlStream_V_pixel_da_1_dout,
        if_empty_n => PxlStream_V_pixel_da_1_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_1_read);

    PxlStream_V_pixel_da_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_da_din,
        if_full_n => PxlStream_V_pixel_da_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_da_write,
        if_dout => PxlStream_V_pixel_da_dout,
        if_empty_n => PxlStream_V_pixel_da_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_da_read);

    PxlStream_V_pixel_us_8_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_8_din,
        if_full_n => PxlStream_V_pixel_us_8_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_8_write,
        if_dout => PxlStream_V_pixel_us_8_dout,
        if_empty_n => PxlStream_V_pixel_us_8_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_8_read);

    PxlStream_V_pixel_us_7_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_7_din,
        if_full_n => PxlStream_V_pixel_us_7_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_7_write,
        if_dout => PxlStream_V_pixel_us_7_dout,
        if_empty_n => PxlStream_V_pixel_us_7_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_7_read);

    PxlStream_V_pixel_us_6_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_6_din,
        if_full_n => PxlStream_V_pixel_us_6_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_6_write,
        if_dout => PxlStream_V_pixel_us_6_dout,
        if_empty_n => PxlStream_V_pixel_us_6_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_6_read);

    PxlStream_V_pixel_us_5_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_5_din,
        if_full_n => PxlStream_V_pixel_us_5_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_5_write,
        if_dout => PxlStream_V_pixel_us_5_dout,
        if_empty_n => PxlStream_V_pixel_us_5_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_5_read);

    PxlStream_V_pixel_us_4_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_4_din,
        if_full_n => PxlStream_V_pixel_us_4_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_4_write,
        if_dout => PxlStream_V_pixel_us_4_dout,
        if_empty_n => PxlStream_V_pixel_us_4_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_4_read);

    PxlStream_V_pixel_us_3_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_3_din,
        if_full_n => PxlStream_V_pixel_us_3_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_3_write,
        if_dout => PxlStream_V_pixel_us_3_dout,
        if_empty_n => PxlStream_V_pixel_us_3_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_3_read);

    PxlStream_V_pixel_us_2_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_2_din,
        if_full_n => PxlStream_V_pixel_us_2_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_2_write,
        if_dout => PxlStream_V_pixel_us_2_dout,
        if_empty_n => PxlStream_V_pixel_us_2_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_2_read);

    PxlStream_V_pixel_us_1_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_1_din,
        if_full_n => PxlStream_V_pixel_us_1_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_1_write,
        if_dout => PxlStream_V_pixel_us_1_dout,
        if_empty_n => PxlStream_V_pixel_us_1_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_1_read);

    PxlStream_V_pixel_us_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_us_din,
        if_full_n => PxlStream_V_pixel_us_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_us_write,
        if_dout => PxlStream_V_pixel_us_dout,
        if_empty_n => PxlStream_V_pixel_us_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_us_read);

    PxlStream_V_pixel_la_8_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_8_din,
        if_full_n => PxlStream_V_pixel_la_8_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_8_write,
        if_dout => PxlStream_V_pixel_la_8_dout,
        if_empty_n => PxlStream_V_pixel_la_8_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_8_read);

    PxlStream_V_pixel_la_7_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_7_din,
        if_full_n => PxlStream_V_pixel_la_7_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_7_write,
        if_dout => PxlStream_V_pixel_la_7_dout,
        if_empty_n => PxlStream_V_pixel_la_7_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_7_read);

    PxlStream_V_pixel_la_6_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_6_din,
        if_full_n => PxlStream_V_pixel_la_6_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_6_write,
        if_dout => PxlStream_V_pixel_la_6_dout,
        if_empty_n => PxlStream_V_pixel_la_6_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_6_read);

    PxlStream_V_pixel_la_5_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_5_din,
        if_full_n => PxlStream_V_pixel_la_5_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_5_write,
        if_dout => PxlStream_V_pixel_la_5_dout,
        if_empty_n => PxlStream_V_pixel_la_5_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_5_read);

    PxlStream_V_pixel_la_4_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_4_din,
        if_full_n => PxlStream_V_pixel_la_4_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_4_write,
        if_dout => PxlStream_V_pixel_la_4_dout,
        if_empty_n => PxlStream_V_pixel_la_4_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_4_read);

    PxlStream_V_pixel_la_3_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_3_din,
        if_full_n => PxlStream_V_pixel_la_3_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_3_write,
        if_dout => PxlStream_V_pixel_la_3_dout,
        if_empty_n => PxlStream_V_pixel_la_3_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_3_read);

    PxlStream_V_pixel_la_2_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_2_din,
        if_full_n => PxlStream_V_pixel_la_2_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_2_write,
        if_dout => PxlStream_V_pixel_la_2_dout,
        if_empty_n => PxlStream_V_pixel_la_2_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_2_read);

    PxlStream_V_pixel_la_1_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_1_din,
        if_full_n => PxlStream_V_pixel_la_1_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_1_write,
        if_dout => PxlStream_V_pixel_la_1_dout,
        if_empty_n => PxlStream_V_pixel_la_1_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_1_read);

    PxlStream_V_pixel_la_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Matrix_U0_PxlStream_V_pixel_la_din,
        if_full_n => PxlStream_V_pixel_la_full_n,
        if_write => Matrix_U0_PxlStream_V_pixel_la_write,
        if_dout => PxlStream_V_pixel_la_dout,
        if_empty_n => PxlStream_V_pixel_la_empty_n,
        if_read => Median_U0_PxlStream_V_pixel_la_read);

    MdnStream_V_data_V_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Median_U0_MdnStream_V_data_V_din,
        if_full_n => MdnStream_V_data_V_full_n,
        if_write => Median_U0_MdnStream_V_data_V_write,
        if_dout => MdnStream_V_data_V_dout,
        if_empty_n => MdnStream_V_data_V_empty_n,
        if_read => Color_U0_MdnStream_V_data_V_read);

    MdnStream_V_user_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Median_U0_MdnStream_V_user_V_din,
        if_full_n => MdnStream_V_user_V_full_n,
        if_write => Median_U0_MdnStream_V_user_V_write,
        if_dout => MdnStream_V_user_V_dout,
        if_empty_n => MdnStream_V_user_V_empty_n,
        if_read => Color_U0_MdnStream_V_user_V_read);

    MdnStream_V_last_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Median_U0_MdnStream_V_last_V_din,
        if_full_n => MdnStream_V_last_V_full_n,
        if_write => Median_U0_MdnStream_V_last_V_write,
        if_dout => MdnStream_V_last_V_dout,
        if_empty_n => MdnStream_V_last_V_empty_n,
        if_read => Color_U0_MdnStream_V_last_V_read);

    start_for_Matrix_U0_U : component start_for_Matrix_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Matrix_U0_din,
        if_full_n => start_for_Matrix_U0_full_n,
        if_write => BlackWhite_U0_start_write,
        if_dout => start_for_Matrix_U0_dout,
        if_empty_n => start_for_Matrix_U0_empty_n,
        if_read => Matrix_U0_ap_ready);

    start_for_Median_U0_U : component start_for_Median_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Median_U0_din,
        if_full_n => start_for_Median_U0_full_n,
        if_write => Matrix_U0_start_write,
        if_dout => start_for_Median_U0_dout,
        if_empty_n => start_for_Median_U0_empty_n,
        if_read => Median_U0_ap_ready);

    start_for_Color_U0_U : component start_for_Color_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Color_U0_din,
        if_full_n => start_for_Color_U0_full_n,
        if_write => Median_U0_start_write,
        if_dout => start_for_Color_U0_dout,
        if_empty_n => start_for_Color_U0_empty_n,
        if_read => Color_U0_ap_ready);




    BlackWhite_U0_ap_continue <= ap_const_logic_1;
    BlackWhite_U0_ap_start <= ap_const_logic_1;
    BlackWhite_U0_start_full_n <= (start_for_Matrix_U0_full_n or ap_const_logic_0);
    Color_U0_ap_continue <= ap_const_logic_1;
    Color_U0_ap_start <= start_for_Color_U0_empty_n;
    Color_U0_start_full_n <= ap_const_logic_0;
    Color_U0_start_write <= ap_const_logic_0;
    Matrix_U0_ap_continue <= ap_const_logic_1;
    Matrix_U0_ap_start <= start_for_Matrix_U0_empty_n;
    Matrix_U0_start_full_n <= (ap_const_logic_0 or start_for_Median_U0_full_n);
    Median_U0_ap_continue <= ap_const_logic_1;
    Median_U0_ap_start <= start_for_Median_U0_empty_n;
    Median_U0_start_full_n <= (ap_const_logic_0 or start_for_Color_U0_full_n);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    start_for_Color_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Matrix_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Median_U0_din <= (0=>ap_const_logic_1, others=>'-');
    stream_in_TREADY <= BlackWhite_U0_stream_in_TREADY;
    stream_out_TDATA <= Color_U0_stream_out_TDATA;
    stream_out_TLAST <= Color_U0_stream_out_TLAST;
    stream_out_TUSER <= Color_U0_stream_out_TUSER;
    stream_out_TVALID <= Color_U0_stream_out_TVALID;
end behav;
